// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace im {
namespace protocol {
PROTOBUF_CONSTEXPR Heart_req::Heart_req(
    ::_pbi::ConstantInitialized) {}
struct Heart_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Heart_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Heart_reqDefaultTypeInternal() {}
  union {
    Heart_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Heart_reqDefaultTypeInternal _Heart_req_default_instance_;
PROTOBUF_CONSTEXPR Heart_rsp::Heart_rsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct Heart_rspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Heart_rspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Heart_rspDefaultTypeInternal() {}
  union {
    Heart_rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Heart_rspDefaultTypeInternal _Heart_rsp_default_instance_;
PROTOBUF_CONSTEXPR Login_req::Login_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Login_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Login_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Login_reqDefaultTypeInternal() {}
  union {
    Login_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Login_reqDefaultTypeInternal _Login_req_default_instance_;
PROTOBUF_CONSTEXPR Login_rsp::Login_rsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct Login_rspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Login_rspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Login_rspDefaultTypeInternal() {}
  union {
    Login_rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Login_rspDefaultTypeInternal _Login_rsp_default_instance_;
PROTOBUF_CONSTEXPR SendMsg_req::SendMsg_req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.scene_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.time_)*/uint64_t{0u}} {}
struct SendMsg_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMsg_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMsg_reqDefaultTypeInternal() {}
  union {
    SendMsg_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMsg_reqDefaultTypeInternal _SendMsg_req_default_instance_;
PROTOBUF_CONSTEXPR SendMsg_rsp::SendMsg_rsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct SendMsg_rspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMsg_rspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMsg_rspDefaultTypeInternal() {}
  union {
    SendMsg_rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMsg_rspDefaultTypeInternal _SendMsg_rsp_default_instance_;
PROTOBUF_CONSTEXPR GetFriends_req::GetFriends_req(
    ::_pbi::ConstantInitialized) {}
struct GetFriends_reqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFriends_reqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFriends_reqDefaultTypeInternal() {}
  union {
    GetFriends_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFriends_reqDefaultTypeInternal _GetFriends_req_default_instance_;
PROTOBUF_CONSTEXPR GetFriends_rsp::GetFriends_rsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.friends_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct GetFriends_rspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFriends_rspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFriends_rspDefaultTypeInternal() {}
  union {
    GetFriends_rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFriends_rspDefaultTypeInternal _GetFriends_rsp_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.errorcode_)*/0u} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.birth_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mobile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gender_)*/0u
  , /*decltype(_impl_.online_)*/false} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heart_req_)*/nullptr
  , /*decltype(_impl_.heart_rsp_)*/nullptr
  , /*decltype(_impl_.sendmsg_req_)*/nullptr
  , /*decltype(_impl_.sendmsg_rsp_)*/nullptr
  , /*decltype(_impl_.login_req_)*/nullptr
  , /*decltype(_impl_.login_rsp_)*/nullptr
  , /*decltype(_impl_.getfriends_req_)*/nullptr
  , /*decltype(_impl_.getfriends_rsp_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace protocol
}  // namespace im
static ::_pb::Metadata file_level_metadata_im_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_im_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_im_2eproto = nullptr;

const uint32_t TableStruct_im_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Heart_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Heart_rsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Heart_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Heart_rsp, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_req, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_req, _impl_.accid_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_req, _impl_.token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_rsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Login_rsp, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.ex_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_req, _impl_.time_),
  4,
  0,
  5,
  1,
  6,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_rsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::SendMsg_rsp, _impl_.result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GetFriends_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GetFriends_rsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GetFriends_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::GetFriends_rsp, _impl_.friends_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::GetFriends_rsp, _impl_.result_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Result, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Result, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Result, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Result, _impl_.errormsg_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.accid_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.icon_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.birth_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.mobile_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.gender_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.ex_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::User, _impl_.online_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.heart_req_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.heart_rsp_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.sendmsg_req_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.sendmsg_rsp_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.login_req_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.login_rsp_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.getfriends_req_),
  PROTOBUF_FIELD_OFFSET(::im::protocol::Packet, _impl_.getfriends_rsp_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::im::protocol::Heart_req)},
  { 6, 13, -1, sizeof(::im::protocol::Heart_rsp)},
  { 14, 22, -1, sizeof(::im::protocol::Login_req)},
  { 24, 31, -1, sizeof(::im::protocol::Login_rsp)},
  { 32, 46, -1, sizeof(::im::protocol::SendMsg_req)},
  { 54, 61, -1, sizeof(::im::protocol::SendMsg_rsp)},
  { 62, -1, -1, sizeof(::im::protocol::GetFriends_req)},
  { 68, 76, -1, sizeof(::im::protocol::GetFriends_rsp)},
  { 78, 87, -1, sizeof(::im::protocol::Result)},
  { 90, 105, -1, sizeof(::im::protocol::User)},
  { 114, 129, -1, sizeof(::im::protocol::Packet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::im::protocol::_Heart_req_default_instance_._instance,
  &::im::protocol::_Heart_rsp_default_instance_._instance,
  &::im::protocol::_Login_req_default_instance_._instance,
  &::im::protocol::_Login_rsp_default_instance_._instance,
  &::im::protocol::_SendMsg_req_default_instance_._instance,
  &::im::protocol::_SendMsg_rsp_default_instance_._instance,
  &::im::protocol::_GetFriends_req_default_instance_._instance,
  &::im::protocol::_GetFriends_rsp_default_instance_._instance,
  &::im::protocol::_Result_default_instance_._instance,
  &::im::protocol::_User_default_instance_._instance,
  &::im::protocol::_Packet_default_instance_._instance,
};

const char descriptor_table_protodef_im_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010im.proto\022\013im.protocol\"\013\n\tHeart_req\"@\n\t"
  "Heart_rsp\022(\n\006result\030\001 \001(\0132\023.im.protocol."
  "ResultH\000\210\001\001B\t\n\007_result\"G\n\tLogin_req\022\022\n\005a"
  "ccid\030\001 \001(\tH\000\210\001\001\022\022\n\005token\030\002 \001(\tH\001\210\001\001B\010\n\006_"
  "accidB\010\n\006_token\"@\n\tLogin_rsp\022(\n\006result\030\001"
  " \001(\0132\023.im.protocol.ResultH\000\210\001\001B\t\n\007_resul"
  "t\"\343\001\n\013SendMsg_req\022\017\n\002id\030\001 \001(\004H\000\210\001\001\022\021\n\004fr"
  "om\030\002 \001(\tH\001\210\001\001\022\022\n\005scene\030\003 \001(\rH\002\210\001\001\022\017\n\002to\030"
  "\004 \001(\tH\003\210\001\001\022\021\n\004type\030\005 \001(\rH\004\210\001\001\022\021\n\004body\030\006 "
  "\001(\tH\005\210\001\001\022\017\n\002ex\030\007 \001(\tH\006\210\001\001\022\021\n\004time\030\010 \001(\004H"
  "\007\210\001\001B\005\n\003_idB\007\n\005_fromB\010\n\006_sceneB\005\n\003_toB\007\n"
  "\005_typeB\007\n\005_bodyB\005\n\003_exB\007\n\005_time\"B\n\013SendM"
  "sg_rsp\022(\n\006result\030\001 \001(\0132\023.im.protocol.Res"
  "ultH\000\210\001\001B\t\n\007_result\"\020\n\016GetFriends_req\"i\n"
  "\016GetFriends_rsp\022\"\n\007friends\030\001 \003(\0132\021.im.pr"
  "otocol.User\022(\n\006result\030\002 \001(\0132\023.im.protoco"
  "l.ResultH\000\210\001\001B\t\n\007_result\"t\n\006Result\022\024\n\007su"
  "ccess\030\001 \001(\010H\000\210\001\001\022\026\n\terrorCode\030\002 \001(\rH\001\210\001\001"
  "\022\025\n\010errorMsg\030\003 \001(\tH\002\210\001\001B\n\n\010_successB\014\n\n_"
  "errorCodeB\013\n\t_errorMsg\"\216\002\n\004User\022\022\n\005accid"
  "\030\001 \001(\tH\000\210\001\001\022\021\n\004name\030\002 \001(\tH\001\210\001\001\022\021\n\004icon\030\003"
  " \001(\tH\002\210\001\001\022\021\n\004sign\030\004 \001(\tH\003\210\001\001\022\022\n\005birth\030\005 "
  "\001(\tH\004\210\001\001\022\023\n\006mobile\030\006 \001(\tH\005\210\001\001\022\023\n\006gender\030"
  "\007 \001(\rH\006\210\001\001\022\017\n\002ex\030\010 \001(\tH\007\210\001\001\022\023\n\006online\030\t "
  "\001(\010H\010\210\001\001B\010\n\006_accidB\007\n\005_nameB\007\n\005_iconB\007\n\005"
  "_signB\010\n\006_birthB\t\n\007_mobileB\t\n\007_genderB\005\n"
  "\003_exB\t\n\007_online\"\307\004\n\006Packet\022#\n\004type\030\001 \001(\016"
  "2\025.im.protocol.CMD_TYPE\022.\n\theart_req\030\002 \001"
  "(\0132\026.im.protocol.Heart_reqH\000\210\001\001\022.\n\theart"
  "_rsp\030\003 \001(\0132\026.im.protocol.Heart_rspH\001\210\001\001\022"
  "2\n\013sendMsg_req\030\004 \001(\0132\030.im.protocol.SendM"
  "sg_reqH\002\210\001\001\0222\n\013sendMsg_rsp\030\005 \001(\0132\030.im.pr"
  "otocol.SendMsg_rspH\003\210\001\001\022.\n\tLogin_req\030\006 \001"
  "(\0132\026.im.protocol.Login_reqH\004\210\001\001\022.\n\tLogin"
  "_rsp\030\007 \001(\0132\026.im.protocol.Login_rspH\005\210\001\001\022"
  "8\n\016GetFriends_req\030\010 \001(\0132\033.im.protocol.Ge"
  "tFriends_reqH\006\210\001\001\0228\n\016GetFriends_rsp\030\t \001("
  "\0132\033.im.protocol.GetFriends_rspH\007\210\001\001B\014\n\n_"
  "heart_reqB\014\n\n_heart_rspB\016\n\014_sendMsg_reqB"
  "\016\n\014_sendMsg_rspB\014\n\n_Login_reqB\014\n\n_Login_"
  "rspB\021\n\017_GetFriends_reqB\021\n\017_GetFriends_rs"
  "p*\230\001\n\010CMD_TYPE\022\016\n\nHeart_req_\020\000\022\016\n\nHeart_"
  "rsp_\020\001\022\016\n\nLogin_req_\020\002\022\016\n\nLogin_rsp_\020\003\022\020"
  "\n\014SendMsg_req_\020\004\022\020\n\014SendMsg_rsp_\020\005\022\023\n\017Ge"
  "tFriends_req_\020\006\022\023\n\017GetFriends_rsp_\020\007B#\n\025"
  "com.zhuzichu.protocolB\nIMProtocolb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_im_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_im_2eproto = {
    false, false, 1841, descriptor_table_protodef_im_2eproto,
    "im.proto",
    &descriptor_table_im_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_im_2eproto::offsets,
    file_level_metadata_im_2eproto, file_level_enum_descriptors_im_2eproto,
    file_level_service_descriptors_im_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_im_2eproto_getter() {
  return &descriptor_table_im_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_im_2eproto(&descriptor_table_im_2eproto);
namespace im {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMD_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_im_2eproto);
  return file_level_enum_descriptors_im_2eproto[0];
}
bool CMD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Heart_req::_Internal {
 public:
};

Heart_req::Heart_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:im.protocol.Heart_req)
}
Heart_req::Heart_req(const Heart_req& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Heart_req* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:im.protocol.Heart_req)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heart_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heart_req::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Heart_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[0]);
}

// ===================================================================

class Heart_rsp::_Internal {
 public:
  using HasBits = decltype(std::declval<Heart_rsp>()._impl_._has_bits_);
  static const ::im::protocol::Result& result(const Heart_rsp* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::im::protocol::Result&
Heart_rsp::_Internal::result(const Heart_rsp* msg) {
  return *msg->_impl_.result_;
}
Heart_rsp::Heart_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Heart_rsp)
}
Heart_rsp::Heart_rsp(const Heart_rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heart_rsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::im::protocol::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Heart_rsp)
}

inline void Heart_rsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
  };
}

Heart_rsp::~Heart_rsp() {
  // @@protoc_insertion_point(destructor:im.protocol.Heart_rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heart_rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void Heart_rsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heart_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Heart_rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heart_rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .im.protocol.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heart_rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Heart_rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  if (_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Heart_rsp)
  return target;
}

size_t Heart_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Heart_rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heart_rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heart_rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heart_rsp::GetClassData() const { return &_class_data_; }


void Heart_rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heart_rsp*>(&to_msg);
  auto& from = static_cast<const Heart_rsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Heart_rsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::im::protocol::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heart_rsp::CopyFrom(const Heart_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Heart_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart_rsp::IsInitialized() const {
  return true;
}

void Heart_rsp::InternalSwap(Heart_rsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heart_rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[1]);
}

// ===================================================================

class Login_req::_Internal {
 public:
  using HasBits = decltype(std::declval<Login_req>()._impl_._has_bits_);
  static void set_has_accid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Login_req::Login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Login_req)
}
Login_req::Login_req(const Login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Login_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accid_){}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accid()) {
    _this->_impl_.accid_.Set(from._internal_accid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Login_req)
}

inline void Login_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accid_){}
    , decltype(_impl_.token_){}
  };
  _impl_.accid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Login_req::~Login_req() {
  // @@protoc_insertion_point(destructor:im.protocol.Login_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Login_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accid_.Destroy();
  _impl_.token_.Destroy();
}

void Login_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Login_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string accid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.Login_req.accid"));
        } else
          goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.Login_req.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Login_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Login_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string accid = 1;
  if (_internal_has_accid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accid().data(), static_cast<int>(this->_internal_accid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.Login_req.accid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accid(), target);
  }

  // optional string token = 2;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.Login_req.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Login_req)
  return target;
}

size_t Login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Login_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accid());
    }

    // optional string token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Login_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login_req::GetClassData() const { return &_class_data_; }


void Login_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Login_req*>(&to_msg);
  auto& from = static_cast<const Login_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Login_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_accid(from._internal_accid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_token(from._internal_token());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login_req::CopyFrom(const Login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_req::IsInitialized() const {
  return true;
}

void Login_req::InternalSwap(Login_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accid_, lhs_arena,
      &other->_impl_.accid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[2]);
}

// ===================================================================

class Login_rsp::_Internal {
 public:
  using HasBits = decltype(std::declval<Login_rsp>()._impl_._has_bits_);
  static const ::im::protocol::Result& result(const Login_rsp* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::im::protocol::Result&
Login_rsp::_Internal::result(const Login_rsp* msg) {
  return *msg->_impl_.result_;
}
Login_rsp::Login_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Login_rsp)
}
Login_rsp::Login_rsp(const Login_rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Login_rsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::im::protocol::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.Login_rsp)
}

inline void Login_rsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
  };
}

Login_rsp::~Login_rsp() {
  // @@protoc_insertion_point(destructor:im.protocol.Login_rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Login_rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void Login_rsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Login_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Login_rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login_rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .im.protocol.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Login_rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Login_rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  if (_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Login_rsp)
  return target;
}

size_t Login_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Login_rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login_rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Login_rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login_rsp::GetClassData() const { return &_class_data_; }


void Login_rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Login_rsp*>(&to_msg);
  auto& from = static_cast<const Login_rsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Login_rsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::im::protocol::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login_rsp::CopyFrom(const Login_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Login_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_rsp::IsInitialized() const {
  return true;
}

void Login_rsp::InternalSwap(Login_rsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login_rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[3]);
}

// ===================================================================

class SendMsg_req::_Internal {
 public:
  using HasBits = decltype(std::declval<SendMsg_req>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scene(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SendMsg_req::SendMsg_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SendMsg_req)
}
SendMsg_req::SendMsg_req(const SendMsg_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMsg_req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.ex_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.scene_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_to()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ex()) {
    _this->_impl_.ex_.Set(from._internal_ex(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.SendMsg_req)
}

inline void SendMsg_req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.ex_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.scene_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.time_){uint64_t{0u}}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendMsg_req::~SendMsg_req() {
  // @@protoc_insertion_point(destructor:im.protocol.SendMsg_req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMsg_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  _impl_.body_.Destroy();
  _impl_.ex_.Destroy();
}

void SendMsg_req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMsg_req::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SendMsg_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.from_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.to_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ex_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMsg_req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SendMsg_req.from"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scene = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scene(&has_bits);
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SendMsg_req.to"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SendMsg_req.body"));
        } else
          goto handle_unusual;
        continue;
      // optional string ex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.SendMsg_req.ex"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMsg_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SendMsg_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string from = 2;
  if (_internal_has_from()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SendMsg_req.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // optional uint32 scene = 3;
  if (_internal_has_scene()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scene(), target);
  }

  // optional string to = 4;
  if (_internal_has_to()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SendMsg_req.to");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_to(), target);
  }

  // optional uint32 type = 5;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  // optional string body = 6;
  if (_internal_has_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SendMsg_req.body");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_body(), target);
  }

  // optional string ex = 7;
  if (_internal_has_ex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex().data(), static_cast<int>(this->_internal_ex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.SendMsg_req.ex");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ex(), target);
  }

  // optional uint64 time = 8;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SendMsg_req)
  return target;
}

size_t SendMsg_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SendMsg_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from());
    }

    // optional string to = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_to());
    }

    // optional string body = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string ex = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ex());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 scene = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scene());
    }

    // optional uint32 type = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint64 time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMsg_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMsg_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMsg_req::GetClassData() const { return &_class_data_; }


void SendMsg_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMsg_req*>(&to_msg);
  auto& from = static_cast<const SendMsg_req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SendMsg_req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_from(from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_to(from._internal_to());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ex(from._internal_ex());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.scene_ = from._impl_.scene_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMsg_req::CopyFrom(const SendMsg_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SendMsg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsg_req::IsInitialized() const {
  return true;
}

void SendMsg_req::InternalSwap(SendMsg_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ex_, lhs_arena,
      &other->_impl_.ex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMsg_req, _impl_.time_)
      + sizeof(SendMsg_req::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(SendMsg_req, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMsg_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[4]);
}

// ===================================================================

class SendMsg_rsp::_Internal {
 public:
  using HasBits = decltype(std::declval<SendMsg_rsp>()._impl_._has_bits_);
  static const ::im::protocol::Result& result(const SendMsg_rsp* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::im::protocol::Result&
SendMsg_rsp::_Internal::result(const SendMsg_rsp* msg) {
  return *msg->_impl_.result_;
}
SendMsg_rsp::SendMsg_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.SendMsg_rsp)
}
SendMsg_rsp::SendMsg_rsp(const SendMsg_rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendMsg_rsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::im::protocol::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.SendMsg_rsp)
}

inline void SendMsg_rsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
  };
}

SendMsg_rsp::~SendMsg_rsp() {
  // @@protoc_insertion_point(destructor:im.protocol.SendMsg_rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMsg_rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void SendMsg_rsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendMsg_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.SendMsg_rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMsg_rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .im.protocol.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMsg_rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.SendMsg_rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  if (_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.SendMsg_rsp)
  return target;
}

size_t SendMsg_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.SendMsg_rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .im.protocol.Result result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMsg_rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendMsg_rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMsg_rsp::GetClassData() const { return &_class_data_; }


void SendMsg_rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendMsg_rsp*>(&to_msg);
  auto& from = static_cast<const SendMsg_rsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.SendMsg_rsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::im::protocol::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMsg_rsp::CopyFrom(const SendMsg_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.SendMsg_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsg_rsp::IsInitialized() const {
  return true;
}

void SendMsg_rsp::InternalSwap(SendMsg_rsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMsg_rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[5]);
}

// ===================================================================

class GetFriends_req::_Internal {
 public:
};

GetFriends_req::GetFriends_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:im.protocol.GetFriends_req)
}
GetFriends_req::GetFriends_req(const GetFriends_req& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetFriends_req* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:im.protocol.GetFriends_req)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFriends_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFriends_req::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetFriends_req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[6]);
}

// ===================================================================

class GetFriends_rsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFriends_rsp>()._impl_._has_bits_);
  static const ::im::protocol::Result& result(const GetFriends_rsp* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::im::protocol::Result&
GetFriends_rsp::_Internal::result(const GetFriends_rsp* msg) {
  return *msg->_impl_.result_;
}
GetFriends_rsp::GetFriends_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.GetFriends_rsp)
}
GetFriends_rsp::GetFriends_rsp(const GetFriends_rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFriends_rsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friends_){from._impl_.friends_}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::im::protocol::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:im.protocol.GetFriends_rsp)
}

inline void GetFriends_rsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.friends_){arena}
    , decltype(_impl_.result_){nullptr}
  };
}

GetFriends_rsp::~GetFriends_rsp() {
  // @@protoc_insertion_point(destructor:im.protocol.GetFriends_rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFriends_rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friends_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void GetFriends_rsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFriends_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.GetFriends_rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friends_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFriends_rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .im.protocol.User friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFriends_rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.GetFriends_rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .im.protocol.User friends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friends_size()); i < n; i++) {
    const auto& repfield = this->_internal_friends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .im.protocol.Result result = 2;
  if (_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.GetFriends_rsp)
  return target;
}

size_t GetFriends_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.GetFriends_rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .im.protocol.User friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->_impl_.friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .im.protocol.Result result = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFriends_rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFriends_rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFriends_rsp::GetClassData() const { return &_class_data_; }


void GetFriends_rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFriends_rsp*>(&to_msg);
  auto& from = static_cast<const GetFriends_rsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.GetFriends_rsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friends_.MergeFrom(from._impl_.friends_);
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::im::protocol::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFriends_rsp::CopyFrom(const GetFriends_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.GetFriends_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriends_rsp::IsInitialized() const {
  return true;
}

void GetFriends_rsp::InternalSwap(GetFriends_rsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.friends_.InternalSwap(&other->_impl_.friends_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriends_rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[7]);
}

// ===================================================================

class Result::_Internal {
 public:
  using HasBits = decltype(std::declval<Result>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.errorcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errorcode_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.errorcode_){0u}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:im.protocol.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.errorcode_) -
        reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_errorcode(&has_bits);
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.Result.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool success = 1;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint32 errorCode = 2;
  if (_internal_has_errorcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // optional string errorMsg = 3;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.Result.errorMsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string errorMsg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormsg());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 errorCode = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errorcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_errormsg(from._internal_errormsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.errorcode_ = from._impl_.errorcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, _impl_.errorcode_)
      + sizeof(Result::_impl_.errorcode_)
      - PROTOBUF_FIELD_OFFSET(Result, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[8]);
}

// ===================================================================

class User::_Internal {
 public:
  using HasBits = decltype(std::declval<User>()._impl_._has_bits_);
  static void set_has_accid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_birth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.icon_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.birth_){}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.ex_){}
    , decltype(_impl_.gender_){}
    , decltype(_impl_.online_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accid()) {
    _this->_impl_.accid_.Set(from._internal_accid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    _this->_impl_.icon_.Set(from._internal_icon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sign()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.birth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.birth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_birth()) {
    _this->_impl_.birth_.Set(from._internal_birth(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mobile()) {
    _this->_impl_.mobile_.Set(from._internal_mobile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ex()) {
    _this->_impl_.ex_.Set(from._internal_ex(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gender_, &from._impl_.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_) -
    reinterpret_cast<char*>(&_impl_.gender_)) + sizeof(_impl_.online_));
  // @@protoc_insertion_point(copy_constructor:im.protocol.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.icon_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.birth_){}
    , decltype(_impl_.mobile_){}
    , decltype(_impl_.ex_){}
    , decltype(_impl_.gender_){0u}
    , decltype(_impl_.online_){false}
  };
  _impl_.accid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.birth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.birth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mobile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mobile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:im.protocol.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accid_.Destroy();
  _impl_.name_.Destroy();
  _impl_.icon_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.birth_.Destroy();
  _impl_.mobile_.Destroy();
  _impl_.ex_.Destroy();
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.birth_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mobile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.ex_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.gender_ = 0u;
  _impl_.online_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string accid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.accid"));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.icon"));
        } else
          goto handle_unusual;
        continue;
      // optional string sign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.sign"));
        } else
          goto handle_unusual;
        continue;
      // optional string birth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_birth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.birth"));
        } else
          goto handle_unusual;
        continue;
      // optional string mobile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mobile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.mobile"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gender = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gender(&has_bits);
          _impl_.gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.protocol.User.ex"));
        } else
          goto handle_unusual;
        continue;
      // optional bool online = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_online(&has_bits);
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string accid = 1;
  if (_internal_has_accid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accid().data(), static_cast<int>(this->_internal_accid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.accid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accid(), target);
  }

  // optional string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string icon = 3;
  if (_internal_has_icon()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // optional string sign = 4;
  if (_internal_has_sign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.sign");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sign(), target);
  }

  // optional string birth = 5;
  if (_internal_has_birth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birth().data(), static_cast<int>(this->_internal_birth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.birth");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_birth(), target);
  }

  // optional string mobile = 6;
  if (_internal_has_mobile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mobile().data(), static_cast<int>(this->_internal_mobile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.mobile");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mobile(), target);
  }

  // optional uint32 gender = 7;
  if (_internal_has_gender()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gender(), target);
  }

  // optional string ex = 8;
  if (_internal_has_ex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex().data(), static_cast<int>(this->_internal_ex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.protocol.User.ex");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ex(), target);
  }

  // optional bool online = 9;
  if (_internal_has_online()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string accid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accid());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string sign = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sign());
    }

    // optional string birth = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_birth());
    }

    // optional string mobile = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mobile());
    }

    // optional string ex = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ex());
    }

    // optional uint32 gender = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gender());
    }

  }
  // optional bool online = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_accid(from._internal_accid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sign(from._internal_sign());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_birth(from._internal_birth());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_mobile(from._internal_mobile());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_ex(from._internal_ex());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gender_ = from._impl_.gender_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_online(from._internal_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accid_, lhs_arena,
      &other->_impl_.accid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icon_, lhs_arena,
      &other->_impl_.icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.birth_, lhs_arena,
      &other->_impl_.birth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mobile_, lhs_arena,
      &other->_impl_.mobile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ex_, lhs_arena,
      &other->_impl_.ex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, _impl_.online_)
      + sizeof(User::_impl_.online_)
      - PROTOBUF_FIELD_OFFSET(User, _impl_.gender_)>(
          reinterpret_cast<char*>(&_impl_.gender_),
          reinterpret_cast<char*>(&other->_impl_.gender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[9]);
}

// ===================================================================

class Packet::_Internal {
 public:
  using HasBits = decltype(std::declval<Packet>()._impl_._has_bits_);
  static const ::im::protocol::Heart_req& heart_req(const Packet* msg);
  static void set_has_heart_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::im::protocol::Heart_rsp& heart_rsp(const Packet* msg);
  static void set_has_heart_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::im::protocol::SendMsg_req& sendmsg_req(const Packet* msg);
  static void set_has_sendmsg_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::im::protocol::SendMsg_rsp& sendmsg_rsp(const Packet* msg);
  static void set_has_sendmsg_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::im::protocol::Login_req& login_req(const Packet* msg);
  static void set_has_login_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::im::protocol::Login_rsp& login_rsp(const Packet* msg);
  static void set_has_login_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::im::protocol::GetFriends_req& getfriends_req(const Packet* msg);
  static void set_has_getfriends_req(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::im::protocol::GetFriends_rsp& getfriends_rsp(const Packet* msg);
  static void set_has_getfriends_rsp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::im::protocol::Heart_req&
Packet::_Internal::heart_req(const Packet* msg) {
  return *msg->_impl_.heart_req_;
}
const ::im::protocol::Heart_rsp&
Packet::_Internal::heart_rsp(const Packet* msg) {
  return *msg->_impl_.heart_rsp_;
}
const ::im::protocol::SendMsg_req&
Packet::_Internal::sendmsg_req(const Packet* msg) {
  return *msg->_impl_.sendmsg_req_;
}
const ::im::protocol::SendMsg_rsp&
Packet::_Internal::sendmsg_rsp(const Packet* msg) {
  return *msg->_impl_.sendmsg_rsp_;
}
const ::im::protocol::Login_req&
Packet::_Internal::login_req(const Packet* msg) {
  return *msg->_impl_.login_req_;
}
const ::im::protocol::Login_rsp&
Packet::_Internal::login_rsp(const Packet* msg) {
  return *msg->_impl_.login_rsp_;
}
const ::im::protocol::GetFriends_req&
Packet::_Internal::getfriends_req(const Packet* msg) {
  return *msg->_impl_.getfriends_req_;
}
const ::im::protocol::GetFriends_rsp&
Packet::_Internal::getfriends_rsp(const Packet* msg) {
  return *msg->_impl_.getfriends_rsp_;
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.protocol.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heart_req_){nullptr}
    , decltype(_impl_.heart_rsp_){nullptr}
    , decltype(_impl_.sendmsg_req_){nullptr}
    , decltype(_impl_.sendmsg_rsp_){nullptr}
    , decltype(_impl_.login_req_){nullptr}
    , decltype(_impl_.login_rsp_){nullptr}
    , decltype(_impl_.getfriends_req_){nullptr}
    , decltype(_impl_.getfriends_rsp_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heart_req()) {
    _this->_impl_.heart_req_ = new ::im::protocol::Heart_req(*from._impl_.heart_req_);
  }
  if (from._internal_has_heart_rsp()) {
    _this->_impl_.heart_rsp_ = new ::im::protocol::Heart_rsp(*from._impl_.heart_rsp_);
  }
  if (from._internal_has_sendmsg_req()) {
    _this->_impl_.sendmsg_req_ = new ::im::protocol::SendMsg_req(*from._impl_.sendmsg_req_);
  }
  if (from._internal_has_sendmsg_rsp()) {
    _this->_impl_.sendmsg_rsp_ = new ::im::protocol::SendMsg_rsp(*from._impl_.sendmsg_rsp_);
  }
  if (from._internal_has_login_req()) {
    _this->_impl_.login_req_ = new ::im::protocol::Login_req(*from._impl_.login_req_);
  }
  if (from._internal_has_login_rsp()) {
    _this->_impl_.login_rsp_ = new ::im::protocol::Login_rsp(*from._impl_.login_rsp_);
  }
  if (from._internal_has_getfriends_req()) {
    _this->_impl_.getfriends_req_ = new ::im::protocol::GetFriends_req(*from._impl_.getfriends_req_);
  }
  if (from._internal_has_getfriends_rsp()) {
    _this->_impl_.getfriends_rsp_ = new ::im::protocol::GetFriends_rsp(*from._impl_.getfriends_rsp_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:im.protocol.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heart_req_){nullptr}
    , decltype(_impl_.heart_rsp_){nullptr}
    , decltype(_impl_.sendmsg_req_){nullptr}
    , decltype(_impl_.sendmsg_rsp_){nullptr}
    , decltype(_impl_.login_req_){nullptr}
    , decltype(_impl_.login_rsp_){nullptr}
    , decltype(_impl_.getfriends_req_){nullptr}
    , decltype(_impl_.getfriends_rsp_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:im.protocol.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.heart_req_;
  if (this != internal_default_instance()) delete _impl_.heart_rsp_;
  if (this != internal_default_instance()) delete _impl_.sendmsg_req_;
  if (this != internal_default_instance()) delete _impl_.sendmsg_rsp_;
  if (this != internal_default_instance()) delete _impl_.login_req_;
  if (this != internal_default_instance()) delete _impl_.login_rsp_;
  if (this != internal_default_instance()) delete _impl_.getfriends_req_;
  if (this != internal_default_instance()) delete _impl_.getfriends_rsp_;
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:im.protocol.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.heart_req_ != nullptr);
      _impl_.heart_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.heart_rsp_ != nullptr);
      _impl_.heart_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sendmsg_req_ != nullptr);
      _impl_.sendmsg_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.sendmsg_rsp_ != nullptr);
      _impl_.sendmsg_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.login_req_ != nullptr);
      _impl_.login_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.login_rsp_ != nullptr);
      _impl_.login_rsp_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.getfriends_req_ != nullptr);
      _impl_.getfriends_req_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.getfriends_rsp_ != nullptr);
      _impl_.getfriends_rsp_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .im.protocol.CMD_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::im::protocol::CMD_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.Heart_req heart_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.Heart_rsp heart_rsp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.SendMsg_req sendMsg_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendmsg_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.SendMsg_rsp sendMsg_rsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendmsg_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.Login_req Login_req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.Login_rsp Login_rsp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.GetFriends_req GetFriends_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfriends_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .im.protocol.GetFriends_rsp GetFriends_rsp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfriends_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.protocol.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .im.protocol.CMD_TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .im.protocol.Heart_req heart_req = 2;
  if (_internal_has_heart_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::heart_req(this),
        _Internal::heart_req(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.Heart_rsp heart_rsp = 3;
  if (_internal_has_heart_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::heart_rsp(this),
        _Internal::heart_rsp(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.SendMsg_req sendMsg_req = 4;
  if (_internal_has_sendmsg_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sendmsg_req(this),
        _Internal::sendmsg_req(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.SendMsg_rsp sendMsg_rsp = 5;
  if (_internal_has_sendmsg_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sendmsg_rsp(this),
        _Internal::sendmsg_rsp(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.Login_req Login_req = 6;
  if (_internal_has_login_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::login_req(this),
        _Internal::login_req(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.Login_rsp Login_rsp = 7;
  if (_internal_has_login_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::login_rsp(this),
        _Internal::login_rsp(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.GetFriends_req GetFriends_req = 8;
  if (_internal_has_getfriends_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::getfriends_req(this),
        _Internal::getfriends_req(this).GetCachedSize(), target, stream);
  }

  // optional .im.protocol.GetFriends_rsp GetFriends_rsp = 9;
  if (_internal_has_getfriends_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::getfriends_rsp(this),
        _Internal::getfriends_rsp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.protocol.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.protocol.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .im.protocol.Heart_req heart_req = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.heart_req_);
    }

    // optional .im.protocol.Heart_rsp heart_rsp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.heart_rsp_);
    }

    // optional .im.protocol.SendMsg_req sendMsg_req = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendmsg_req_);
    }

    // optional .im.protocol.SendMsg_rsp sendMsg_rsp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sendmsg_rsp_);
    }

    // optional .im.protocol.Login_req Login_req = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_req_);
    }

    // optional .im.protocol.Login_rsp Login_rsp = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.login_rsp_);
    }

    // optional .im.protocol.GetFriends_req GetFriends_req = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.getfriends_req_);
    }

    // optional .im.protocol.GetFriends_rsp GetFriends_rsp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.getfriends_rsp_);
    }

  }
  // .im.protocol.CMD_TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.protocol.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_heart_req()->::im::protocol::Heart_req::MergeFrom(
          from._internal_heart_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_heart_rsp()->::im::protocol::Heart_rsp::MergeFrom(
          from._internal_heart_rsp());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sendmsg_req()->::im::protocol::SendMsg_req::MergeFrom(
          from._internal_sendmsg_req());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sendmsg_rsp()->::im::protocol::SendMsg_rsp::MergeFrom(
          from._internal_sendmsg_rsp());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_login_req()->::im::protocol::Login_req::MergeFrom(
          from._internal_login_req());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_login_rsp()->::im::protocol::Login_rsp::MergeFrom(
          from._internal_login_rsp());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_getfriends_req()->::im::protocol::GetFriends_req::MergeFrom(
          from._internal_getfriends_req());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_getfriends_rsp()->::im::protocol::GetFriends_rsp::MergeFrom(
          from._internal_getfriends_rsp());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.protocol.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Packet, _impl_.type_)
      + sizeof(Packet::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Packet, _impl_.heart_req_)>(
          reinterpret_cast<char*>(&_impl_.heart_req_),
          reinterpret_cast<char*>(&other->_impl_.heart_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_im_2eproto_getter, &descriptor_table_im_2eproto_once,
      file_level_metadata_im_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::im::protocol::Heart_req*
Arena::CreateMaybeMessage< ::im::protocol::Heart_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Heart_req >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::Heart_rsp*
Arena::CreateMaybeMessage< ::im::protocol::Heart_rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Heart_rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::Login_req*
Arena::CreateMaybeMessage< ::im::protocol::Login_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::Login_rsp*
Arena::CreateMaybeMessage< ::im::protocol::Login_rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Login_rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SendMsg_req*
Arena::CreateMaybeMessage< ::im::protocol::SendMsg_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SendMsg_req >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::SendMsg_rsp*
Arena::CreateMaybeMessage< ::im::protocol::SendMsg_rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::SendMsg_rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::GetFriends_req*
Arena::CreateMaybeMessage< ::im::protocol::GetFriends_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::GetFriends_req >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::GetFriends_rsp*
Arena::CreateMaybeMessage< ::im::protocol::GetFriends_rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::GetFriends_rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::Result*
Arena::CreateMaybeMessage< ::im::protocol::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::User*
Arena::CreateMaybeMessage< ::im::protocol::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::User >(arena);
}
template<> PROTOBUF_NOINLINE ::im::protocol::Packet*
Arena::CreateMaybeMessage< ::im::protocol::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::protocol::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
