// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_im_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_im_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_im_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_im_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_im_2eproto;
namespace im {
namespace protocol {
class GetFriends_req;
struct GetFriends_reqDefaultTypeInternal;
extern GetFriends_reqDefaultTypeInternal _GetFriends_req_default_instance_;
class GetFriends_rsp;
struct GetFriends_rspDefaultTypeInternal;
extern GetFriends_rspDefaultTypeInternal _GetFriends_rsp_default_instance_;
class GetProfile_req;
struct GetProfile_reqDefaultTypeInternal;
extern GetProfile_reqDefaultTypeInternal _GetProfile_req_default_instance_;
class GetProfile_rsp;
struct GetProfile_rspDefaultTypeInternal;
extern GetProfile_rspDefaultTypeInternal _GetProfile_rsp_default_instance_;
class Heart_req;
struct Heart_reqDefaultTypeInternal;
extern Heart_reqDefaultTypeInternal _Heart_req_default_instance_;
class Heart_rsp;
struct Heart_rspDefaultTypeInternal;
extern Heart_rspDefaultTypeInternal _Heart_rsp_default_instance_;
class Login_req;
struct Login_reqDefaultTypeInternal;
extern Login_reqDefaultTypeInternal _Login_req_default_instance_;
class Login_rsp;
struct Login_rspDefaultTypeInternal;
extern Login_rspDefaultTypeInternal _Login_rsp_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SendMsg_req;
struct SendMsg_reqDefaultTypeInternal;
extern SendMsg_reqDefaultTypeInternal _SendMsg_req_default_instance_;
class SendMsg_rsp;
struct SendMsg_rspDefaultTypeInternal;
extern SendMsg_rspDefaultTypeInternal _SendMsg_rsp_default_instance_;
class SyncMsg_req;
struct SyncMsg_reqDefaultTypeInternal;
extern SyncMsg_reqDefaultTypeInternal _SyncMsg_req_default_instance_;
class SyncMsg_rsp;
struct SyncMsg_rspDefaultTypeInternal;
extern SyncMsg_rspDefaultTypeInternal _SyncMsg_rsp_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace protocol
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::protocol::GetFriends_req* Arena::CreateMaybeMessage<::im::protocol::GetFriends_req>(Arena*);
template<> ::im::protocol::GetFriends_rsp* Arena::CreateMaybeMessage<::im::protocol::GetFriends_rsp>(Arena*);
template<> ::im::protocol::GetProfile_req* Arena::CreateMaybeMessage<::im::protocol::GetProfile_req>(Arena*);
template<> ::im::protocol::GetProfile_rsp* Arena::CreateMaybeMessage<::im::protocol::GetProfile_rsp>(Arena*);
template<> ::im::protocol::Heart_req* Arena::CreateMaybeMessage<::im::protocol::Heart_req>(Arena*);
template<> ::im::protocol::Heart_rsp* Arena::CreateMaybeMessage<::im::protocol::Heart_rsp>(Arena*);
template<> ::im::protocol::Login_req* Arena::CreateMaybeMessage<::im::protocol::Login_req>(Arena*);
template<> ::im::protocol::Login_rsp* Arena::CreateMaybeMessage<::im::protocol::Login_rsp>(Arena*);
template<> ::im::protocol::Message* Arena::CreateMaybeMessage<::im::protocol::Message>(Arena*);
template<> ::im::protocol::Packet* Arena::CreateMaybeMessage<::im::protocol::Packet>(Arena*);
template<> ::im::protocol::Result* Arena::CreateMaybeMessage<::im::protocol::Result>(Arena*);
template<> ::im::protocol::SendMsg_req* Arena::CreateMaybeMessage<::im::protocol::SendMsg_req>(Arena*);
template<> ::im::protocol::SendMsg_rsp* Arena::CreateMaybeMessage<::im::protocol::SendMsg_rsp>(Arena*);
template<> ::im::protocol::SyncMsg_req* Arena::CreateMaybeMessage<::im::protocol::SyncMsg_req>(Arena*);
template<> ::im::protocol::SyncMsg_rsp* Arena::CreateMaybeMessage<::im::protocol::SyncMsg_rsp>(Arena*);
template<> ::im::protocol::User* Arena::CreateMaybeMessage<::im::protocol::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace protocol {

enum CMD_TYPE : int {
  Heart_req_ = 0,
  Heart_rsp_ = 1,
  Login_req_ = 2,
  Login_rsp_ = 3,
  SendMsg_req_ = 4,
  SendMsg_rsp_ = 5,
  GetFriends_req_ = 6,
  GetFriends_rsp_ = 7,
  GetProfile_req_ = 8,
  GetProfile_rsp_ = 9,
  SyncMsg_req_ = 10,
  SyncMsg_rsp_ = 11,
  CMD_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CMD_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CMD_TYPE_IsValid(int value);
constexpr CMD_TYPE CMD_TYPE_MIN = Heart_req_;
constexpr CMD_TYPE CMD_TYPE_MAX = SyncMsg_rsp_;
constexpr int CMD_TYPE_ARRAYSIZE = CMD_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMD_TYPE_descriptor();
template<typename T>
inline const std::string& CMD_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMD_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMD_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMD_TYPE_descriptor(), enum_t_value);
}
inline bool CMD_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMD_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMD_TYPE>(
    CMD_TYPE_descriptor(), name, value);
}
// ===================================================================

class Heart_req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:im.protocol.Heart_req) */ {
 public:
  inline Heart_req() : Heart_req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Heart_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart_req(const Heart_req& from);
  Heart_req(Heart_req&& from) noexcept
    : Heart_req() {
    *this = ::std::move(from);
  }

  inline Heart_req& operator=(const Heart_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart_req& operator=(Heart_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart_req* internal_default_instance() {
    return reinterpret_cast<const Heart_req*>(
               &_Heart_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heart_req& a, Heart_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Heart_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Heart_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Heart_req";
  }
  protected:
  explicit Heart_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:im.protocol.Heart_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Heart_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Heart_rsp) */ {
 public:
  inline Heart_rsp() : Heart_rsp(nullptr) {}
  ~Heart_rsp() override;
  explicit PROTOBUF_CONSTEXPR Heart_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart_rsp(const Heart_rsp& from);
  Heart_rsp(Heart_rsp&& from) noexcept
    : Heart_rsp() {
    *this = ::std::move(from);
  }

  inline Heart_rsp& operator=(const Heart_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart_rsp& operator=(Heart_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart_rsp* internal_default_instance() {
    return reinterpret_cast<const Heart_rsp*>(
               &_Heart_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Heart_rsp& a, Heart_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heart_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heart_rsp& from) {
    Heart_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heart_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Heart_rsp";
  }
  protected:
  explicit Heart_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:im.protocol.Heart_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::im::protocol::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Login_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Login_req) */ {
 public:
  inline Login_req() : Login_req(nullptr) {}
  ~Login_req() override;
  explicit PROTOBUF_CONSTEXPR Login_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_req(const Login_req& from);
  Login_req(Login_req&& from) noexcept
    : Login_req() {
    *this = ::std::move(from);
  }

  inline Login_req& operator=(const Login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_req& operator=(Login_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_req* internal_default_instance() {
    return reinterpret_cast<const Login_req*>(
               &_Login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Login_req& a, Login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_req& from) {
    Login_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Login_req";
  }
  protected:
  explicit Login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccidFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // optional string accid = 1;
  bool has_accid() const;
  private:
  bool _internal_has_accid() const;
  public:
  void clear_accid();
  const std::string& accid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accid();
  PROTOBUF_NODISCARD std::string* release_accid();
  void set_allocated_accid(std::string* accid);
  private:
  const std::string& _internal_accid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accid(const std::string& value);
  std::string* _internal_mutable_accid();
  public:

  // optional string token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.Login_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Login_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Login_rsp) */ {
 public:
  inline Login_rsp() : Login_rsp(nullptr) {}
  ~Login_rsp() override;
  explicit PROTOBUF_CONSTEXPR Login_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_rsp(const Login_rsp& from);
  Login_rsp(Login_rsp&& from) noexcept
    : Login_rsp() {
    *this = ::std::move(from);
  }

  inline Login_rsp& operator=(const Login_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_rsp& operator=(Login_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_rsp* internal_default_instance() {
    return reinterpret_cast<const Login_rsp*>(
               &_Login_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Login_rsp& a, Login_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_rsp& from) {
    Login_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Login_rsp";
  }
  protected:
  explicit Login_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:im.protocol.Login_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::im::protocol::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SendMsg_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SendMsg_req) */ {
 public:
  inline SendMsg_req() : SendMsg_req(nullptr) {}
  ~SendMsg_req() override;
  explicit PROTOBUF_CONSTEXPR SendMsg_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMsg_req(const SendMsg_req& from);
  SendMsg_req(SendMsg_req&& from) noexcept
    : SendMsg_req() {
    *this = ::std::move(from);
  }

  inline SendMsg_req& operator=(const SendMsg_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsg_req& operator=(SendMsg_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMsg_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMsg_req* internal_default_instance() {
    return reinterpret_cast<const SendMsg_req*>(
               &_SendMsg_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendMsg_req& a, SendMsg_req& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsg_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsg_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMsg_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMsg_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMsg_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMsg_req& from) {
    SendMsg_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsg_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SendMsg_req";
  }
  protected:
  explicit SendMsg_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .im.protocol.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::im::protocol::Message& message() const;
  PROTOBUF_NODISCARD ::im::protocol::Message* release_message();
  ::im::protocol::Message* mutable_message();
  void set_allocated_message(::im::protocol::Message* message);
  private:
  const ::im::protocol::Message& _internal_message() const;
  ::im::protocol::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::im::protocol::Message* message);
  ::im::protocol::Message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:im.protocol.SendMsg_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::im::protocol::Message* message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SendMsg_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SendMsg_rsp) */ {
 public:
  inline SendMsg_rsp() : SendMsg_rsp(nullptr) {}
  ~SendMsg_rsp() override;
  explicit PROTOBUF_CONSTEXPR SendMsg_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMsg_rsp(const SendMsg_rsp& from);
  SendMsg_rsp(SendMsg_rsp&& from) noexcept
    : SendMsg_rsp() {
    *this = ::std::move(from);
  }

  inline SendMsg_rsp& operator=(const SendMsg_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsg_rsp& operator=(SendMsg_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMsg_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMsg_rsp* internal_default_instance() {
    return reinterpret_cast<const SendMsg_rsp*>(
               &_SendMsg_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendMsg_rsp& a, SendMsg_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsg_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsg_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMsg_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMsg_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMsg_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMsg_rsp& from) {
    SendMsg_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsg_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SendMsg_rsp";
  }
  protected:
  explicit SendMsg_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:im.protocol.SendMsg_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::im::protocol::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class GetFriends_req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:im.protocol.GetFriends_req) */ {
 public:
  inline GetFriends_req() : GetFriends_req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetFriends_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriends_req(const GetFriends_req& from);
  GetFriends_req(GetFriends_req&& from) noexcept
    : GetFriends_req() {
    *this = ::std::move(from);
  }

  inline GetFriends_req& operator=(const GetFriends_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriends_req& operator=(GetFriends_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriends_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriends_req* internal_default_instance() {
    return reinterpret_cast<const GetFriends_req*>(
               &_GetFriends_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetFriends_req& a, GetFriends_req& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriends_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriends_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriends_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriends_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetFriends_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetFriends_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GetFriends_req";
  }
  protected:
  explicit GetFriends_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:im.protocol.GetFriends_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class GetFriends_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.GetFriends_rsp) */ {
 public:
  inline GetFriends_rsp() : GetFriends_rsp(nullptr) {}
  ~GetFriends_rsp() override;
  explicit PROTOBUF_CONSTEXPR GetFriends_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriends_rsp(const GetFriends_rsp& from);
  GetFriends_rsp(GetFriends_rsp&& from) noexcept
    : GetFriends_rsp() {
    *this = ::std::move(from);
  }

  inline GetFriends_rsp& operator=(const GetFriends_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriends_rsp& operator=(GetFriends_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriends_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriends_rsp* internal_default_instance() {
    return reinterpret_cast<const GetFriends_rsp*>(
               &_GetFriends_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetFriends_rsp& a, GetFriends_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriends_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriends_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriends_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriends_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriends_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriends_rsp& from) {
    GetFriends_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriends_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GetFriends_rsp";
  }
  protected:
  explicit GetFriends_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .im.protocol.User friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::im::protocol::User* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::User >*
      mutable_friends();
  private:
  const ::im::protocol::User& _internal_friends(int index) const;
  ::im::protocol::User* _internal_add_friends();
  public:
  const ::im::protocol::User& friends(int index) const;
  ::im::protocol::User* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::User >&
      friends() const;

  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:im.protocol.GetFriends_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::User > friends_;
    ::im::protocol::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class GetProfile_req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:im.protocol.GetProfile_req) */ {
 public:
  inline GetProfile_req() : GetProfile_req(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetProfile_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProfile_req(const GetProfile_req& from);
  GetProfile_req(GetProfile_req&& from) noexcept
    : GetProfile_req() {
    *this = ::std::move(from);
  }

  inline GetProfile_req& operator=(const GetProfile_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfile_req& operator=(GetProfile_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProfile_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProfile_req* internal_default_instance() {
    return reinterpret_cast<const GetProfile_req*>(
               &_GetProfile_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetProfile_req& a, GetProfile_req& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfile_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfile_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProfile_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProfile_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetProfile_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetProfile_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GetProfile_req";
  }
  protected:
  explicit GetProfile_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:im.protocol.GetProfile_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class GetProfile_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.GetProfile_rsp) */ {
 public:
  inline GetProfile_rsp() : GetProfile_rsp(nullptr) {}
  ~GetProfile_rsp() override;
  explicit PROTOBUF_CONSTEXPR GetProfile_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProfile_rsp(const GetProfile_rsp& from);
  GetProfile_rsp(GetProfile_rsp&& from) noexcept
    : GetProfile_rsp() {
    *this = ::std::move(from);
  }

  inline GetProfile_rsp& operator=(const GetProfile_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProfile_rsp& operator=(GetProfile_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProfile_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProfile_rsp* internal_default_instance() {
    return reinterpret_cast<const GetProfile_rsp*>(
               &_GetProfile_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetProfile_rsp& a, GetProfile_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProfile_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProfile_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProfile_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProfile_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProfile_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetProfile_rsp& from) {
    GetProfile_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfile_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.GetProfile_rsp";
  }
  protected:
  explicit GetProfile_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // optional .im.protocol.User user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::im::protocol::User& user() const;
  PROTOBUF_NODISCARD ::im::protocol::User* release_user();
  ::im::protocol::User* mutable_user();
  void set_allocated_user(::im::protocol::User* user);
  private:
  const ::im::protocol::User& _internal_user() const;
  ::im::protocol::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::im::protocol::User* user);
  ::im::protocol::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:im.protocol.GetProfile_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::im::protocol::Result* result_;
    ::im::protocol::User* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SyncMsg_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SyncMsg_req) */ {
 public:
  inline SyncMsg_req() : SyncMsg_req(nullptr) {}
  ~SyncMsg_req() override;
  explicit PROTOBUF_CONSTEXPR SyncMsg_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncMsg_req(const SyncMsg_req& from);
  SyncMsg_req(SyncMsg_req&& from) noexcept
    : SyncMsg_req() {
    *this = ::std::move(from);
  }

  inline SyncMsg_req& operator=(const SyncMsg_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncMsg_req& operator=(SyncMsg_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncMsg_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncMsg_req* internal_default_instance() {
    return reinterpret_cast<const SyncMsg_req*>(
               &_SyncMsg_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncMsg_req& a, SyncMsg_req& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncMsg_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncMsg_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncMsg_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncMsg_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncMsg_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncMsg_req& from) {
    SyncMsg_req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncMsg_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SyncMsg_req";
  }
  protected:
  explicit SyncMsg_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastMsgTimeFieldNumber = 1,
  };
  // optional int64 lastMsgTime = 1;
  bool has_lastmsgtime() const;
  private:
  bool _internal_has_lastmsgtime() const;
  public:
  void clear_lastmsgtime();
  int64_t lastmsgtime() const;
  void set_lastmsgtime(int64_t value);
  private:
  int64_t _internal_lastmsgtime() const;
  void _internal_set_lastmsgtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.SyncMsg_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t lastmsgtime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SyncMsg_rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.SyncMsg_rsp) */ {
 public:
  inline SyncMsg_rsp() : SyncMsg_rsp(nullptr) {}
  ~SyncMsg_rsp() override;
  explicit PROTOBUF_CONSTEXPR SyncMsg_rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncMsg_rsp(const SyncMsg_rsp& from);
  SyncMsg_rsp(SyncMsg_rsp&& from) noexcept
    : SyncMsg_rsp() {
    *this = ::std::move(from);
  }

  inline SyncMsg_rsp& operator=(const SyncMsg_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncMsg_rsp& operator=(SyncMsg_rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncMsg_rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncMsg_rsp* internal_default_instance() {
    return reinterpret_cast<const SyncMsg_rsp*>(
               &_SyncMsg_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SyncMsg_rsp& a, SyncMsg_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncMsg_rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncMsg_rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncMsg_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncMsg_rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncMsg_rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncMsg_rsp& from) {
    SyncMsg_rsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncMsg_rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.SyncMsg_rsp";
  }
  protected:
  explicit SyncMsg_rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .im.protocol.Message messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::im::protocol::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::Message >*
      mutable_messages();
  private:
  const ::im::protocol::Message& _internal_messages(int index) const;
  ::im::protocol::Message* _internal_add_messages();
  public:
  const ::im::protocol::Message& messages(int index) const;
  ::im::protocol::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::Message >&
      messages() const;

  // optional .im.protocol.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::im::protocol::Result& result() const;
  PROTOBUF_NODISCARD ::im::protocol::Result* release_result();
  ::im::protocol::Result* mutable_result();
  void set_allocated_result(::im::protocol::Result* result);
  private:
  const ::im::protocol::Result& _internal_result() const;
  ::im::protocol::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::im::protocol::Result* result);
  ::im::protocol::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:im.protocol.SyncMsg_rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::Message > messages_;
    ::im::protocol::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // optional string errorMsg = 3;
  bool has_errormsg() const;
  private:
  bool _internal_has_errormsg() const;
  public:
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_NODISCARD std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional uint32 errorCode = 2;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  uint32_t errorcode() const;
  void set_errorcode(uint32_t value);
  private:
  uint32_t _internal_errorcode() const;
  void _internal_set_errorcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
    bool success_;
    uint32_t errorcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 4,
    kBodyFieldNumber = 6,
    kExFieldNumber = 7,
    kSceneFieldNumber = 3,
    kTypeFieldNumber = 5,
    kTimeFieldNumber = 8,
  };
  // optional string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string from = 2;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // optional string to = 4;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // optional string body = 6;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional string ex = 7;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const std::string& ex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex();
  PROTOBUF_NODISCARD std::string* release_ex();
  void set_allocated_ex(std::string* ex);
  private:
  const std::string& _internal_ex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex(const std::string& value);
  std::string* _internal_mutable_ex();
  public:

  // optional uint32 scene = 3;
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  uint32_t scene() const;
  void set_scene(uint32_t value);
  private:
  uint32_t _internal_scene() const;
  void _internal_set_scene(uint32_t value);
  public:

  // optional uint32 type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // optional uint64 time = 8;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_;
    uint32_t scene_;
    uint32_t type_;
    uint64_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccidFieldNumber = 1,
    kNameFieldNumber = 2,
    kIconFieldNumber = 3,
    kSignFieldNumber = 4,
    kBirthFieldNumber = 5,
    kMobileFieldNumber = 6,
    kExFieldNumber = 8,
    kGenderFieldNumber = 7,
    kOnlineFieldNumber = 9,
  };
  // optional string accid = 1;
  bool has_accid() const;
  private:
  bool _internal_has_accid() const;
  public:
  void clear_accid();
  const std::string& accid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accid();
  PROTOBUF_NODISCARD std::string* release_accid();
  void set_allocated_accid(std::string* accid);
  private:
  const std::string& _internal_accid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accid(const std::string& value);
  std::string* _internal_mutable_accid();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 3;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string sign = 4;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // optional string birth = 5;
  bool has_birth() const;
  private:
  bool _internal_has_birth() const;
  public:
  void clear_birth();
  const std::string& birth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_birth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_birth();
  PROTOBUF_NODISCARD std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // optional string mobile = 6;
  bool has_mobile() const;
  private:
  bool _internal_has_mobile() const;
  public:
  void clear_mobile();
  const std::string& mobile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobile();
  PROTOBUF_NODISCARD std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);
  private:
  const std::string& _internal_mobile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobile(const std::string& value);
  std::string* _internal_mutable_mobile();
  public:

  // optional string ex = 8;
  bool has_ex() const;
  private:
  bool _internal_has_ex() const;
  public:
  void clear_ex();
  const std::string& ex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex();
  PROTOBUF_NODISCARD std::string* release_ex();
  void set_allocated_ex(std::string* ex);
  private:
  const std::string& _internal_ex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex(const std::string& value);
  std::string* _internal_mutable_ex();
  public:

  // optional uint32 gender = 7;
  bool has_gender() const;
  private:
  bool _internal_has_gender() const;
  public:
  void clear_gender();
  uint32_t gender() const;
  void set_gender(uint32_t value);
  private:
  uint32_t _internal_gender() const;
  void _internal_set_gender(uint32_t value);
  public:

  // optional bool online = 9;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_;
    uint32_t gender_;
    bool online_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.protocol.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.protocol.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartReqFieldNumber = 2,
    kHeartRspFieldNumber = 3,
    kSendMsgReqFieldNumber = 4,
    kSendMsgRspFieldNumber = 5,
    kLoginReqFieldNumber = 6,
    kLoginRspFieldNumber = 7,
    kGetFriendsReqFieldNumber = 8,
    kGetFriendsRspFieldNumber = 9,
    kGetProfileReqFieldNumber = 10,
    kGetProfileRspFieldNumber = 11,
    kSyncMsgReqFieldNumber = 12,
    kSyncMsgRspFieldNumber = 13,
    kTypeFieldNumber = 1,
  };
  // optional .im.protocol.Heart_req heart_req = 2;
  bool has_heart_req() const;
  private:
  bool _internal_has_heart_req() const;
  public:
  void clear_heart_req();
  const ::im::protocol::Heart_req& heart_req() const;
  PROTOBUF_NODISCARD ::im::protocol::Heart_req* release_heart_req();
  ::im::protocol::Heart_req* mutable_heart_req();
  void set_allocated_heart_req(::im::protocol::Heart_req* heart_req);
  private:
  const ::im::protocol::Heart_req& _internal_heart_req() const;
  ::im::protocol::Heart_req* _internal_mutable_heart_req();
  public:
  void unsafe_arena_set_allocated_heart_req(
      ::im::protocol::Heart_req* heart_req);
  ::im::protocol::Heart_req* unsafe_arena_release_heart_req();

  // optional .im.protocol.Heart_rsp heart_rsp = 3;
  bool has_heart_rsp() const;
  private:
  bool _internal_has_heart_rsp() const;
  public:
  void clear_heart_rsp();
  const ::im::protocol::Heart_rsp& heart_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::Heart_rsp* release_heart_rsp();
  ::im::protocol::Heart_rsp* mutable_heart_rsp();
  void set_allocated_heart_rsp(::im::protocol::Heart_rsp* heart_rsp);
  private:
  const ::im::protocol::Heart_rsp& _internal_heart_rsp() const;
  ::im::protocol::Heart_rsp* _internal_mutable_heart_rsp();
  public:
  void unsafe_arena_set_allocated_heart_rsp(
      ::im::protocol::Heart_rsp* heart_rsp);
  ::im::protocol::Heart_rsp* unsafe_arena_release_heart_rsp();

  // optional .im.protocol.SendMsg_req sendMsg_req = 4;
  bool has_sendmsg_req() const;
  private:
  bool _internal_has_sendmsg_req() const;
  public:
  void clear_sendmsg_req();
  const ::im::protocol::SendMsg_req& sendmsg_req() const;
  PROTOBUF_NODISCARD ::im::protocol::SendMsg_req* release_sendmsg_req();
  ::im::protocol::SendMsg_req* mutable_sendmsg_req();
  void set_allocated_sendmsg_req(::im::protocol::SendMsg_req* sendmsg_req);
  private:
  const ::im::protocol::SendMsg_req& _internal_sendmsg_req() const;
  ::im::protocol::SendMsg_req* _internal_mutable_sendmsg_req();
  public:
  void unsafe_arena_set_allocated_sendmsg_req(
      ::im::protocol::SendMsg_req* sendmsg_req);
  ::im::protocol::SendMsg_req* unsafe_arena_release_sendmsg_req();

  // optional .im.protocol.SendMsg_rsp sendMsg_rsp = 5;
  bool has_sendmsg_rsp() const;
  private:
  bool _internal_has_sendmsg_rsp() const;
  public:
  void clear_sendmsg_rsp();
  const ::im::protocol::SendMsg_rsp& sendmsg_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::SendMsg_rsp* release_sendmsg_rsp();
  ::im::protocol::SendMsg_rsp* mutable_sendmsg_rsp();
  void set_allocated_sendmsg_rsp(::im::protocol::SendMsg_rsp* sendmsg_rsp);
  private:
  const ::im::protocol::SendMsg_rsp& _internal_sendmsg_rsp() const;
  ::im::protocol::SendMsg_rsp* _internal_mutable_sendmsg_rsp();
  public:
  void unsafe_arena_set_allocated_sendmsg_rsp(
      ::im::protocol::SendMsg_rsp* sendmsg_rsp);
  ::im::protocol::SendMsg_rsp* unsafe_arena_release_sendmsg_rsp();

  // optional .im.protocol.Login_req login_req = 6;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::im::protocol::Login_req& login_req() const;
  PROTOBUF_NODISCARD ::im::protocol::Login_req* release_login_req();
  ::im::protocol::Login_req* mutable_login_req();
  void set_allocated_login_req(::im::protocol::Login_req* login_req);
  private:
  const ::im::protocol::Login_req& _internal_login_req() const;
  ::im::protocol::Login_req* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::im::protocol::Login_req* login_req);
  ::im::protocol::Login_req* unsafe_arena_release_login_req();

  // optional .im.protocol.Login_rsp login_rsp = 7;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::im::protocol::Login_rsp& login_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::Login_rsp* release_login_rsp();
  ::im::protocol::Login_rsp* mutable_login_rsp();
  void set_allocated_login_rsp(::im::protocol::Login_rsp* login_rsp);
  private:
  const ::im::protocol::Login_rsp& _internal_login_rsp() const;
  ::im::protocol::Login_rsp* _internal_mutable_login_rsp();
  public:
  void unsafe_arena_set_allocated_login_rsp(
      ::im::protocol::Login_rsp* login_rsp);
  ::im::protocol::Login_rsp* unsafe_arena_release_login_rsp();

  // optional .im.protocol.GetFriends_req getFriends_req = 8;
  bool has_getfriends_req() const;
  private:
  bool _internal_has_getfriends_req() const;
  public:
  void clear_getfriends_req();
  const ::im::protocol::GetFriends_req& getfriends_req() const;
  PROTOBUF_NODISCARD ::im::protocol::GetFriends_req* release_getfriends_req();
  ::im::protocol::GetFriends_req* mutable_getfriends_req();
  void set_allocated_getfriends_req(::im::protocol::GetFriends_req* getfriends_req);
  private:
  const ::im::protocol::GetFriends_req& _internal_getfriends_req() const;
  ::im::protocol::GetFriends_req* _internal_mutable_getfriends_req();
  public:
  void unsafe_arena_set_allocated_getfriends_req(
      ::im::protocol::GetFriends_req* getfriends_req);
  ::im::protocol::GetFriends_req* unsafe_arena_release_getfriends_req();

  // optional .im.protocol.GetFriends_rsp getFriends_rsp = 9;
  bool has_getfriends_rsp() const;
  private:
  bool _internal_has_getfriends_rsp() const;
  public:
  void clear_getfriends_rsp();
  const ::im::protocol::GetFriends_rsp& getfriends_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::GetFriends_rsp* release_getfriends_rsp();
  ::im::protocol::GetFriends_rsp* mutable_getfriends_rsp();
  void set_allocated_getfriends_rsp(::im::protocol::GetFriends_rsp* getfriends_rsp);
  private:
  const ::im::protocol::GetFriends_rsp& _internal_getfriends_rsp() const;
  ::im::protocol::GetFriends_rsp* _internal_mutable_getfriends_rsp();
  public:
  void unsafe_arena_set_allocated_getfriends_rsp(
      ::im::protocol::GetFriends_rsp* getfriends_rsp);
  ::im::protocol::GetFriends_rsp* unsafe_arena_release_getfriends_rsp();

  // optional .im.protocol.GetProfile_req getProfile_req = 10;
  bool has_getprofile_req() const;
  private:
  bool _internal_has_getprofile_req() const;
  public:
  void clear_getprofile_req();
  const ::im::protocol::GetProfile_req& getprofile_req() const;
  PROTOBUF_NODISCARD ::im::protocol::GetProfile_req* release_getprofile_req();
  ::im::protocol::GetProfile_req* mutable_getprofile_req();
  void set_allocated_getprofile_req(::im::protocol::GetProfile_req* getprofile_req);
  private:
  const ::im::protocol::GetProfile_req& _internal_getprofile_req() const;
  ::im::protocol::GetProfile_req* _internal_mutable_getprofile_req();
  public:
  void unsafe_arena_set_allocated_getprofile_req(
      ::im::protocol::GetProfile_req* getprofile_req);
  ::im::protocol::GetProfile_req* unsafe_arena_release_getprofile_req();

  // optional .im.protocol.GetProfile_rsp getProfile_rsp = 11;
  bool has_getprofile_rsp() const;
  private:
  bool _internal_has_getprofile_rsp() const;
  public:
  void clear_getprofile_rsp();
  const ::im::protocol::GetProfile_rsp& getprofile_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::GetProfile_rsp* release_getprofile_rsp();
  ::im::protocol::GetProfile_rsp* mutable_getprofile_rsp();
  void set_allocated_getprofile_rsp(::im::protocol::GetProfile_rsp* getprofile_rsp);
  private:
  const ::im::protocol::GetProfile_rsp& _internal_getprofile_rsp() const;
  ::im::protocol::GetProfile_rsp* _internal_mutable_getprofile_rsp();
  public:
  void unsafe_arena_set_allocated_getprofile_rsp(
      ::im::protocol::GetProfile_rsp* getprofile_rsp);
  ::im::protocol::GetProfile_rsp* unsafe_arena_release_getprofile_rsp();

  // optional .im.protocol.SyncMsg_req syncMsg_req = 12;
  bool has_syncmsg_req() const;
  private:
  bool _internal_has_syncmsg_req() const;
  public:
  void clear_syncmsg_req();
  const ::im::protocol::SyncMsg_req& syncmsg_req() const;
  PROTOBUF_NODISCARD ::im::protocol::SyncMsg_req* release_syncmsg_req();
  ::im::protocol::SyncMsg_req* mutable_syncmsg_req();
  void set_allocated_syncmsg_req(::im::protocol::SyncMsg_req* syncmsg_req);
  private:
  const ::im::protocol::SyncMsg_req& _internal_syncmsg_req() const;
  ::im::protocol::SyncMsg_req* _internal_mutable_syncmsg_req();
  public:
  void unsafe_arena_set_allocated_syncmsg_req(
      ::im::protocol::SyncMsg_req* syncmsg_req);
  ::im::protocol::SyncMsg_req* unsafe_arena_release_syncmsg_req();

  // optional .im.protocol.SyncMsg_rsp syncMsg_rsp = 13;
  bool has_syncmsg_rsp() const;
  private:
  bool _internal_has_syncmsg_rsp() const;
  public:
  void clear_syncmsg_rsp();
  const ::im::protocol::SyncMsg_rsp& syncmsg_rsp() const;
  PROTOBUF_NODISCARD ::im::protocol::SyncMsg_rsp* release_syncmsg_rsp();
  ::im::protocol::SyncMsg_rsp* mutable_syncmsg_rsp();
  void set_allocated_syncmsg_rsp(::im::protocol::SyncMsg_rsp* syncmsg_rsp);
  private:
  const ::im::protocol::SyncMsg_rsp& _internal_syncmsg_rsp() const;
  ::im::protocol::SyncMsg_rsp* _internal_mutable_syncmsg_rsp();
  public:
  void unsafe_arena_set_allocated_syncmsg_rsp(
      ::im::protocol::SyncMsg_rsp* syncmsg_rsp);
  ::im::protocol::SyncMsg_rsp* unsafe_arena_release_syncmsg_rsp();

  // .im.protocol.CMD_TYPE type = 1;
  void clear_type();
  ::im::protocol::CMD_TYPE type() const;
  void set_type(::im::protocol::CMD_TYPE value);
  private:
  ::im::protocol::CMD_TYPE _internal_type() const;
  void _internal_set_type(::im::protocol::CMD_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:im.protocol.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::im::protocol::Heart_req* heart_req_;
    ::im::protocol::Heart_rsp* heart_rsp_;
    ::im::protocol::SendMsg_req* sendmsg_req_;
    ::im::protocol::SendMsg_rsp* sendmsg_rsp_;
    ::im::protocol::Login_req* login_req_;
    ::im::protocol::Login_rsp* login_rsp_;
    ::im::protocol::GetFriends_req* getfriends_req_;
    ::im::protocol::GetFriends_rsp* getfriends_rsp_;
    ::im::protocol::GetProfile_req* getprofile_req_;
    ::im::protocol::GetProfile_rsp* getprofile_rsp_;
    ::im::protocol::SyncMsg_req* syncmsg_req_;
    ::im::protocol::SyncMsg_rsp* syncmsg_rsp_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_im_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heart_req

// -------------------------------------------------------------------

// Heart_rsp

// optional .im.protocol.Result result = 1;
inline bool Heart_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool Heart_rsp::has_result() const {
  return _internal_has_result();
}
inline void Heart_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& Heart_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& Heart_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.Heart_rsp.result)
  return _internal_result();
}
inline void Heart_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Heart_rsp.result)
}
inline ::im::protocol::Result* Heart_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* Heart_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.Heart_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* Heart_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* Heart_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.Heart_rsp.result)
  return _msg;
}
inline void Heart_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Heart_rsp.result)
}

// -------------------------------------------------------------------

// Login_req

// optional string accid = 1;
inline bool Login_req::_internal_has_accid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Login_req::has_accid() const {
  return _internal_has_accid();
}
inline void Login_req::clear_accid() {
  _impl_.accid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Login_req::accid() const {
  // @@protoc_insertion_point(field_get:im.protocol.Login_req.accid)
  return _internal_accid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_req::set_accid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Login_req.accid)
}
inline std::string* Login_req::mutable_accid() {
  std::string* _s = _internal_mutable_accid();
  // @@protoc_insertion_point(field_mutable:im.protocol.Login_req.accid)
  return _s;
}
inline const std::string& Login_req::_internal_accid() const {
  return _impl_.accid_.Get();
}
inline void Login_req::_internal_set_accid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accid_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_req::_internal_mutable_accid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accid_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_req::release_accid() {
  // @@protoc_insertion_point(field_release:im.protocol.Login_req.accid)
  if (!_internal_has_accid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accid_.IsDefault()) {
    _impl_.accid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Login_req::set_allocated_accid(std::string* accid) {
  if (accid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accid_.SetAllocated(accid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accid_.IsDefault()) {
    _impl_.accid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Login_req.accid)
}

// optional string token = 2;
inline bool Login_req::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Login_req::has_token() const {
  return _internal_has_token();
}
inline void Login_req::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Login_req::token() const {
  // @@protoc_insertion_point(field_get:im.protocol.Login_req.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_req::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Login_req.token)
}
inline std::string* Login_req::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:im.protocol.Login_req.token)
  return _s;
}
inline const std::string& Login_req::_internal_token() const {
  return _impl_.token_.Get();
}
inline void Login_req::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_req::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_req::release_token() {
  // @@protoc_insertion_point(field_release:im.protocol.Login_req.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Login_req::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Login_req.token)
}

// -------------------------------------------------------------------

// Login_rsp

// optional .im.protocol.Result result = 1;
inline bool Login_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool Login_rsp::has_result() const {
  return _internal_has_result();
}
inline void Login_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& Login_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& Login_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.Login_rsp.result)
  return _internal_result();
}
inline void Login_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Login_rsp.result)
}
inline ::im::protocol::Result* Login_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* Login_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.Login_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* Login_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* Login_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.Login_rsp.result)
  return _msg;
}
inline void Login_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Login_rsp.result)
}

// -------------------------------------------------------------------

// SendMsg_req

// .im.protocol.Message message = 1;
inline bool SendMsg_req::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool SendMsg_req::has_message() const {
  return _internal_has_message();
}
inline void SendMsg_req::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::im::protocol::Message& SendMsg_req::_internal_message() const {
  const ::im::protocol::Message* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Message&>(
      ::im::protocol::_Message_default_instance_);
}
inline const ::im::protocol::Message& SendMsg_req::message() const {
  // @@protoc_insertion_point(field_get:im.protocol.SendMsg_req.message)
  return _internal_message();
}
inline void SendMsg_req::unsafe_arena_set_allocated_message(
    ::im::protocol::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SendMsg_req.message)
}
inline ::im::protocol::Message* SendMsg_req::release_message() {
  
  ::im::protocol::Message* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Message* SendMsg_req::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:im.protocol.SendMsg_req.message)
  
  ::im::protocol::Message* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::im::protocol::Message* SendMsg_req::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Message>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::im::protocol::Message* SendMsg_req::mutable_message() {
  ::im::protocol::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:im.protocol.SendMsg_req.message)
  return _msg;
}
inline void SendMsg_req::set_allocated_message(::im::protocol::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SendMsg_req.message)
}

// -------------------------------------------------------------------

// SendMsg_rsp

// optional .im.protocol.Result result = 1;
inline bool SendMsg_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool SendMsg_rsp::has_result() const {
  return _internal_has_result();
}
inline void SendMsg_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& SendMsg_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& SendMsg_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.SendMsg_rsp.result)
  return _internal_result();
}
inline void SendMsg_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SendMsg_rsp.result)
}
inline ::im::protocol::Result* SendMsg_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* SendMsg_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.SendMsg_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* SendMsg_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* SendMsg_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.SendMsg_rsp.result)
  return _msg;
}
inline void SendMsg_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SendMsg_rsp.result)
}

// -------------------------------------------------------------------

// GetFriends_req

// -------------------------------------------------------------------

// GetFriends_rsp

// optional .im.protocol.Result result = 1;
inline bool GetFriends_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool GetFriends_rsp::has_result() const {
  return _internal_has_result();
}
inline void GetFriends_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& GetFriends_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& GetFriends_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.GetFriends_rsp.result)
  return _internal_result();
}
inline void GetFriends_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GetFriends_rsp.result)
}
inline ::im::protocol::Result* GetFriends_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* GetFriends_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.GetFriends_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* GetFriends_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* GetFriends_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.GetFriends_rsp.result)
  return _msg;
}
inline void GetFriends_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GetFriends_rsp.result)
}

// repeated .im.protocol.User friends = 2;
inline int GetFriends_rsp::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int GetFriends_rsp::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriends_rsp::clear_friends() {
  _impl_.friends_.Clear();
}
inline ::im::protocol::User* GetFriends_rsp::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:im.protocol.GetFriends_rsp.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::User >*
GetFriends_rsp::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:im.protocol.GetFriends_rsp.friends)
  return &_impl_.friends_;
}
inline const ::im::protocol::User& GetFriends_rsp::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::im::protocol::User& GetFriends_rsp::friends(int index) const {
  // @@protoc_insertion_point(field_get:im.protocol.GetFriends_rsp.friends)
  return _internal_friends(index);
}
inline ::im::protocol::User* GetFriends_rsp::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::im::protocol::User* GetFriends_rsp::add_friends() {
  ::im::protocol::User* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:im.protocol.GetFriends_rsp.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::User >&
GetFriends_rsp::friends() const {
  // @@protoc_insertion_point(field_list:im.protocol.GetFriends_rsp.friends)
  return _impl_.friends_;
}

// -------------------------------------------------------------------

// GetProfile_req

// -------------------------------------------------------------------

// GetProfile_rsp

// optional .im.protocol.Result result = 1;
inline bool GetProfile_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool GetProfile_rsp::has_result() const {
  return _internal_has_result();
}
inline void GetProfile_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& GetProfile_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& GetProfile_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.GetProfile_rsp.result)
  return _internal_result();
}
inline void GetProfile_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GetProfile_rsp.result)
}
inline ::im::protocol::Result* GetProfile_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* GetProfile_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.GetProfile_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* GetProfile_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* GetProfile_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.GetProfile_rsp.result)
  return _msg;
}
inline void GetProfile_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GetProfile_rsp.result)
}

// optional .im.protocol.User user = 2;
inline bool GetProfile_rsp::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline bool GetProfile_rsp::has_user() const {
  return _internal_has_user();
}
inline void GetProfile_rsp::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::protocol::User& GetProfile_rsp::_internal_user() const {
  const ::im::protocol::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::User&>(
      ::im::protocol::_User_default_instance_);
}
inline const ::im::protocol::User& GetProfile_rsp::user() const {
  // @@protoc_insertion_point(field_get:im.protocol.GetProfile_rsp.user)
  return _internal_user();
}
inline void GetProfile_rsp::unsafe_arena_set_allocated_user(
    ::im::protocol::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.GetProfile_rsp.user)
}
inline ::im::protocol::User* GetProfile_rsp::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::protocol::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::User* GetProfile_rsp::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:im.protocol.GetProfile_rsp.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::protocol::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::im::protocol::User* GetProfile_rsp::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::im::protocol::User* GetProfile_rsp::mutable_user() {
  ::im::protocol::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:im.protocol.GetProfile_rsp.user)
  return _msg;
}
inline void GetProfile_rsp::set_allocated_user(::im::protocol::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.GetProfile_rsp.user)
}

// -------------------------------------------------------------------

// SyncMsg_req

// optional int64 lastMsgTime = 1;
inline bool SyncMsg_req::_internal_has_lastmsgtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncMsg_req::has_lastmsgtime() const {
  return _internal_has_lastmsgtime();
}
inline void SyncMsg_req::clear_lastmsgtime() {
  _impl_.lastmsgtime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t SyncMsg_req::_internal_lastmsgtime() const {
  return _impl_.lastmsgtime_;
}
inline int64_t SyncMsg_req::lastmsgtime() const {
  // @@protoc_insertion_point(field_get:im.protocol.SyncMsg_req.lastMsgTime)
  return _internal_lastmsgtime();
}
inline void SyncMsg_req::_internal_set_lastmsgtime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lastmsgtime_ = value;
}
inline void SyncMsg_req::set_lastmsgtime(int64_t value) {
  _internal_set_lastmsgtime(value);
  // @@protoc_insertion_point(field_set:im.protocol.SyncMsg_req.lastMsgTime)
}

// -------------------------------------------------------------------

// SyncMsg_rsp

// optional .im.protocol.Result result = 1;
inline bool SyncMsg_rsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool SyncMsg_rsp::has_result() const {
  return _internal_has_result();
}
inline void SyncMsg_rsp::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Result& SyncMsg_rsp::_internal_result() const {
  const ::im::protocol::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Result&>(
      ::im::protocol::_Result_default_instance_);
}
inline const ::im::protocol::Result& SyncMsg_rsp::result() const {
  // @@protoc_insertion_point(field_get:im.protocol.SyncMsg_rsp.result)
  return _internal_result();
}
inline void SyncMsg_rsp::unsafe_arena_set_allocated_result(
    ::im::protocol::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.SyncMsg_rsp.result)
}
inline ::im::protocol::Result* SyncMsg_rsp::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Result* SyncMsg_rsp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:im.protocol.SyncMsg_rsp.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::im::protocol::Result* SyncMsg_rsp::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::im::protocol::Result* SyncMsg_rsp::mutable_result() {
  ::im::protocol::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:im.protocol.SyncMsg_rsp.result)
  return _msg;
}
inline void SyncMsg_rsp::set_allocated_result(::im::protocol::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.SyncMsg_rsp.result)
}

// repeated .im.protocol.Message messages = 2;
inline int SyncMsg_rsp::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int SyncMsg_rsp::messages_size() const {
  return _internal_messages_size();
}
inline void SyncMsg_rsp::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::im::protocol::Message* SyncMsg_rsp::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:im.protocol.SyncMsg_rsp.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::Message >*
SyncMsg_rsp::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:im.protocol.SyncMsg_rsp.messages)
  return &_impl_.messages_;
}
inline const ::im::protocol::Message& SyncMsg_rsp::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::im::protocol::Message& SyncMsg_rsp::messages(int index) const {
  // @@protoc_insertion_point(field_get:im.protocol.SyncMsg_rsp.messages)
  return _internal_messages(index);
}
inline ::im::protocol::Message* SyncMsg_rsp::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::im::protocol::Message* SyncMsg_rsp::add_messages() {
  ::im::protocol::Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:im.protocol.SyncMsg_rsp.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::im::protocol::Message >&
SyncMsg_rsp::messages() const {
  // @@protoc_insertion_point(field_list:im.protocol.SyncMsg_rsp.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// Result

// optional bool success = 1;
inline bool Result::_internal_has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Result::has_success() const {
  return _internal_has_success();
}
inline void Result::clear_success() {
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Result::_internal_success() const {
  return _impl_.success_;
}
inline bool Result::success() const {
  // @@protoc_insertion_point(field_get:im.protocol.Result.success)
  return _internal_success();
}
inline void Result::_internal_set_success(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.success_ = value;
}
inline void Result::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:im.protocol.Result.success)
}

// optional uint32 errorCode = 2;
inline bool Result::_internal_has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Result::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Result::clear_errorcode() {
  _impl_.errorcode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Result::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline uint32_t Result::errorcode() const {
  // @@protoc_insertion_point(field_get:im.protocol.Result.errorCode)
  return _internal_errorcode();
}
inline void Result::_internal_set_errorcode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errorcode_ = value;
}
inline void Result::set_errorcode(uint32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:im.protocol.Result.errorCode)
}

// optional string errorMsg = 3;
inline bool Result::_internal_has_errormsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Result::has_errormsg() const {
  return _internal_has_errormsg();
}
inline void Result::clear_errormsg() {
  _impl_.errormsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Result::errormsg() const {
  // @@protoc_insertion_point(field_get:im.protocol.Result.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_errormsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errormsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Result.errorMsg)
}
inline std::string* Result::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:im.protocol.Result.errorMsg)
  return _s;
}
inline const std::string& Result::_internal_errormsg() const {
  return _impl_.errormsg_.Get();
}
inline void Result::_internal_set_errormsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errormsg_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_errormsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errormsg_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_errormsg() {
  // @@protoc_insertion_point(field_release:im.protocol.Result.errorMsg)
  if (!_internal_has_errormsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errormsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Result::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errormsg_.SetAllocated(errormsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Result.errorMsg)
}

// -------------------------------------------------------------------

// Message

// optional string uuid = 1;
inline bool Message::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_uuid() const {
  return _internal_has_uuid();
}
inline void Message::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::uuid() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Message.uuid)
}
inline std::string* Message::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.uuid)
  return _s;
}
inline const std::string& Message::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void Message::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_uuid() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.uuid)
}

// optional string from = 2;
inline bool Message::_internal_has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_from() const {
  return _internal_has_from();
}
inline void Message::clear_from() {
  _impl_.from_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message::from() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_from(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Message.from)
}
inline std::string* Message::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.from)
  return _s;
}
inline const std::string& Message::_internal_from() const {
  return _impl_.from_.Get();
}
inline void Message::_internal_set_from(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_from() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.from_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_from() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.from)
  if (!_internal_has_from()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.from_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.from_.SetAllocated(from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_.IsDefault()) {
    _impl_.from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.from)
}

// optional uint32 scene = 3;
inline bool Message::_internal_has_scene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Message::has_scene() const {
  return _internal_has_scene();
}
inline void Message::clear_scene() {
  _impl_.scene_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Message::_internal_scene() const {
  return _impl_.scene_;
}
inline uint32_t Message::scene() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.scene)
  return _internal_scene();
}
inline void Message::_internal_set_scene(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scene_ = value;
}
inline void Message::set_scene(uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:im.protocol.Message.scene)
}

// optional string to = 4;
inline bool Message::_internal_has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_to() const {
  return _internal_has_to();
}
inline void Message::clear_to() {
  _impl_.to_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message::to() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_to(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Message.to)
}
inline std::string* Message::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.to)
  return _s;
}
inline const std::string& Message::_internal_to() const {
  return _impl_.to_.Get();
}
inline void Message::_internal_set_to(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_to() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_to() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.to)
  if (!_internal_has_to()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.to_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.to)
}

// optional uint32 type = 5;
inline bool Message::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Message::has_type() const {
  return _internal_has_type();
}
inline void Message::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Message::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Message::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_ = value;
}
inline void Message::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Message.type)
}

// optional string body = 6;
inline bool Message::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Message::has_body() const {
  return _internal_has_body();
}
inline void Message::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message::body() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Message.body)
}
inline std::string* Message::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.body)
  return _s;
}
inline const std::string& Message::_internal_body() const {
  return _impl_.body_.Get();
}
inline void Message::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_body() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.body)
}

// optional string ex = 7;
inline bool Message::_internal_has_ex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Message::has_ex() const {
  return _internal_has_ex();
}
inline void Message::clear_ex() {
  _impl_.ex_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message::ex() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.ex)
  return _internal_ex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_ex(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.ex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.Message.ex)
}
inline std::string* Message::mutable_ex() {
  std::string* _s = _internal_mutable_ex();
  // @@protoc_insertion_point(field_mutable:im.protocol.Message.ex)
  return _s;
}
inline const std::string& Message::_internal_ex() const {
  return _impl_.ex_.Get();
}
inline void Message::_internal_set_ex(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ex_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_ex() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.ex_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_ex() {
  // @@protoc_insertion_point(field_release:im.protocol.Message.ex)
  if (!_internal_has_ex()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.ex_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ex_.IsDefault()) {
    _impl_.ex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Message::set_allocated_ex(std::string* ex) {
  if (ex != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.ex_.SetAllocated(ex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ex_.IsDefault()) {
    _impl_.ex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Message.ex)
}

// optional uint64 time = 8;
inline bool Message::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Message::has_time() const {
  return _internal_has_time();
}
inline void Message::clear_time() {
  _impl_.time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Message::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t Message::time() const {
  // @@protoc_insertion_point(field_get:im.protocol.Message.time)
  return _internal_time();
}
inline void Message::_internal_set_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.time_ = value;
}
inline void Message::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:im.protocol.Message.time)
}

// -------------------------------------------------------------------

// User

// optional string accid = 1;
inline bool User::_internal_has_accid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User::has_accid() const {
  return _internal_has_accid();
}
inline void User::clear_accid() {
  _impl_.accid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User::accid() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.accid)
  return _internal_accid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_accid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.accid)
}
inline std::string* User::mutable_accid() {
  std::string* _s = _internal_mutable_accid();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.accid)
  return _s;
}
inline const std::string& User::_internal_accid() const {
  return _impl_.accid_.Get();
}
inline void User::_internal_set_accid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accid_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_accid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accid_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_accid() {
  // @@protoc_insertion_point(field_release:im.protocol.User.accid)
  if (!_internal_has_accid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accid_.IsDefault()) {
    _impl_.accid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_accid(std::string* accid) {
  if (accid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accid_.SetAllocated(accid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accid_.IsDefault()) {
    _impl_.accid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.accid)
}

// optional string name = 2;
inline bool User::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User::has_name() const {
  return _internal_has_name();
}
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:im.protocol.User.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.name)
}

// optional string icon = 3;
inline bool User::_internal_has_icon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool User::has_icon() const {
  return _internal_has_icon();
}
inline void User::clear_icon() {
  _impl_.icon_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& User::icon() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_icon(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.icon)
}
inline std::string* User::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.icon)
  return _s;
}
inline const std::string& User::_internal_icon() const {
  return _impl_.icon_.Get();
}
inline void User::_internal_set_icon(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_icon() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.icon_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_icon() {
  // @@protoc_insertion_point(field_release:im.protocol.User.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.icon)
}

// optional string sign = 4;
inline bool User::_internal_has_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool User::has_sign() const {
  return _internal_has_sign();
}
inline void User::clear_sign() {
  _impl_.sign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& User::sign() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_sign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.sign)
}
inline std::string* User::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.sign)
  return _s;
}
inline const std::string& User::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void User::_internal_set_sign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_sign() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_sign() {
  // @@protoc_insertion_point(field_release:im.protocol.User.sign)
  if (!_internal_has_sign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.sign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.sign)
}

// optional string birth = 5;
inline bool User::_internal_has_birth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool User::has_birth() const {
  return _internal_has_birth();
}
inline void User::clear_birth() {
  _impl_.birth_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& User::birth() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.birth)
  return _internal_birth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_birth(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.birth_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.birth)
}
inline std::string* User::mutable_birth() {
  std::string* _s = _internal_mutable_birth();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.birth)
  return _s;
}
inline const std::string& User::_internal_birth() const {
  return _impl_.birth_.Get();
}
inline void User::_internal_set_birth(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.birth_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_birth() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.birth_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_birth() {
  // @@protoc_insertion_point(field_release:im.protocol.User.birth)
  if (!_internal_has_birth()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.birth_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.birth_.IsDefault()) {
    _impl_.birth_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.birth_.SetAllocated(birth, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.birth_.IsDefault()) {
    _impl_.birth_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.birth)
}

// optional string mobile = 6;
inline bool User::_internal_has_mobile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool User::has_mobile() const {
  return _internal_has_mobile();
}
inline void User::clear_mobile() {
  _impl_.mobile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& User::mobile() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.mobile)
  return _internal_mobile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_mobile(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.mobile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.mobile)
}
inline std::string* User::mutable_mobile() {
  std::string* _s = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.mobile)
  return _s;
}
inline const std::string& User::_internal_mobile() const {
  return _impl_.mobile_.Get();
}
inline void User::_internal_set_mobile(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mobile_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_mobile() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.mobile_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_mobile() {
  // @@protoc_insertion_point(field_release:im.protocol.User.mobile)
  if (!_internal_has_mobile()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.mobile_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.mobile_.SetAllocated(mobile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mobile_.IsDefault()) {
    _impl_.mobile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.mobile)
}

// optional uint32 gender = 7;
inline bool User::_internal_has_gender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool User::has_gender() const {
  return _internal_has_gender();
}
inline void User::clear_gender() {
  _impl_.gender_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t User::_internal_gender() const {
  return _impl_.gender_;
}
inline uint32_t User::gender() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.gender)
  return _internal_gender();
}
inline void User::_internal_set_gender(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gender_ = value;
}
inline void User::set_gender(uint32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:im.protocol.User.gender)
}

// optional string ex = 8;
inline bool User::_internal_has_ex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool User::has_ex() const {
  return _internal_has_ex();
}
inline void User::clear_ex() {
  _impl_.ex_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& User::ex() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.ex)
  return _internal_ex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_ex(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.ex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.protocol.User.ex)
}
inline std::string* User::mutable_ex() {
  std::string* _s = _internal_mutable_ex();
  // @@protoc_insertion_point(field_mutable:im.protocol.User.ex)
  return _s;
}
inline const std::string& User::_internal_ex() const {
  return _impl_.ex_.Get();
}
inline void User::_internal_set_ex(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ex_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_ex() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.ex_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_ex() {
  // @@protoc_insertion_point(field_release:im.protocol.User.ex)
  if (!_internal_has_ex()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.ex_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ex_.IsDefault()) {
    _impl_.ex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_ex(std::string* ex) {
  if (ex != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.ex_.SetAllocated(ex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ex_.IsDefault()) {
    _impl_.ex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.protocol.User.ex)
}

// optional bool online = 9;
inline bool User::_internal_has_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool User::has_online() const {
  return _internal_has_online();
}
inline void User::clear_online() {
  _impl_.online_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool User::_internal_online() const {
  return _impl_.online_;
}
inline bool User::online() const {
  // @@protoc_insertion_point(field_get:im.protocol.User.online)
  return _internal_online();
}
inline void User::_internal_set_online(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.online_ = value;
}
inline void User::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:im.protocol.User.online)
}

// -------------------------------------------------------------------

// Packet

// .im.protocol.CMD_TYPE type = 1;
inline void Packet::clear_type() {
  _impl_.type_ = 0;
}
inline ::im::protocol::CMD_TYPE Packet::_internal_type() const {
  return static_cast< ::im::protocol::CMD_TYPE >(_impl_.type_);
}
inline ::im::protocol::CMD_TYPE Packet::type() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::im::protocol::CMD_TYPE value) {
  
  _impl_.type_ = value;
}
inline void Packet::set_type(::im::protocol::CMD_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.protocol.Packet.type)
}

// optional .im.protocol.Heart_req heart_req = 2;
inline bool Packet::_internal_has_heart_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heart_req_ != nullptr);
  return value;
}
inline bool Packet::has_heart_req() const {
  return _internal_has_heart_req();
}
inline void Packet::clear_heart_req() {
  if (_impl_.heart_req_ != nullptr) _impl_.heart_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::im::protocol::Heart_req& Packet::_internal_heart_req() const {
  const ::im::protocol::Heart_req* p = _impl_.heart_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Heart_req&>(
      ::im::protocol::_Heart_req_default_instance_);
}
inline const ::im::protocol::Heart_req& Packet::heart_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.heart_req)
  return _internal_heart_req();
}
inline void Packet::unsafe_arena_set_allocated_heart_req(
    ::im::protocol::Heart_req* heart_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_req_);
  }
  _impl_.heart_req_ = heart_req;
  if (heart_req) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.heart_req)
}
inline ::im::protocol::Heart_req* Packet::release_heart_req() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Heart_req* temp = _impl_.heart_req_;
  _impl_.heart_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Heart_req* Packet::unsafe_arena_release_heart_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.heart_req)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::im::protocol::Heart_req* temp = _impl_.heart_req_;
  _impl_.heart_req_ = nullptr;
  return temp;
}
inline ::im::protocol::Heart_req* Packet::_internal_mutable_heart_req() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.heart_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Heart_req>(GetArenaForAllocation());
    _impl_.heart_req_ = p;
  }
  return _impl_.heart_req_;
}
inline ::im::protocol::Heart_req* Packet::mutable_heart_req() {
  ::im::protocol::Heart_req* _msg = _internal_mutable_heart_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.heart_req)
  return _msg;
}
inline void Packet::set_allocated_heart_req(::im::protocol::Heart_req* heart_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.heart_req_;
  }
  if (heart_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heart_req);
    if (message_arena != submessage_arena) {
      heart_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.heart_req_ = heart_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.heart_req)
}

// optional .im.protocol.Heart_rsp heart_rsp = 3;
inline bool Packet::_internal_has_heart_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heart_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_heart_rsp() const {
  return _internal_has_heart_rsp();
}
inline void Packet::clear_heart_rsp() {
  if (_impl_.heart_rsp_ != nullptr) _impl_.heart_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::im::protocol::Heart_rsp& Packet::_internal_heart_rsp() const {
  const ::im::protocol::Heart_rsp* p = _impl_.heart_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Heart_rsp&>(
      ::im::protocol::_Heart_rsp_default_instance_);
}
inline const ::im::protocol::Heart_rsp& Packet::heart_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.heart_rsp)
  return _internal_heart_rsp();
}
inline void Packet::unsafe_arena_set_allocated_heart_rsp(
    ::im::protocol::Heart_rsp* heart_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_rsp_);
  }
  _impl_.heart_rsp_ = heart_rsp;
  if (heart_rsp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.heart_rsp)
}
inline ::im::protocol::Heart_rsp* Packet::release_heart_rsp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::protocol::Heart_rsp* temp = _impl_.heart_rsp_;
  _impl_.heart_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Heart_rsp* Packet::unsafe_arena_release_heart_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.heart_rsp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::im::protocol::Heart_rsp* temp = _impl_.heart_rsp_;
  _impl_.heart_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::Heart_rsp* Packet::_internal_mutable_heart_rsp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.heart_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Heart_rsp>(GetArenaForAllocation());
    _impl_.heart_rsp_ = p;
  }
  return _impl_.heart_rsp_;
}
inline ::im::protocol::Heart_rsp* Packet::mutable_heart_rsp() {
  ::im::protocol::Heart_rsp* _msg = _internal_mutable_heart_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.heart_rsp)
  return _msg;
}
inline void Packet::set_allocated_heart_rsp(::im::protocol::Heart_rsp* heart_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.heart_rsp_;
  }
  if (heart_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heart_rsp);
    if (message_arena != submessage_arena) {
      heart_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.heart_rsp_ = heart_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.heart_rsp)
}

// optional .im.protocol.SendMsg_req sendMsg_req = 4;
inline bool Packet::_internal_has_sendmsg_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sendmsg_req_ != nullptr);
  return value;
}
inline bool Packet::has_sendmsg_req() const {
  return _internal_has_sendmsg_req();
}
inline void Packet::clear_sendmsg_req() {
  if (_impl_.sendmsg_req_ != nullptr) _impl_.sendmsg_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::im::protocol::SendMsg_req& Packet::_internal_sendmsg_req() const {
  const ::im::protocol::SendMsg_req* p = _impl_.sendmsg_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::SendMsg_req&>(
      ::im::protocol::_SendMsg_req_default_instance_);
}
inline const ::im::protocol::SendMsg_req& Packet::sendmsg_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.sendMsg_req)
  return _internal_sendmsg_req();
}
inline void Packet::unsafe_arena_set_allocated_sendmsg_req(
    ::im::protocol::SendMsg_req* sendmsg_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendmsg_req_);
  }
  _impl_.sendmsg_req_ = sendmsg_req;
  if (sendmsg_req) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.sendMsg_req)
}
inline ::im::protocol::SendMsg_req* Packet::release_sendmsg_req() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::im::protocol::SendMsg_req* temp = _impl_.sendmsg_req_;
  _impl_.sendmsg_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::SendMsg_req* Packet::unsafe_arena_release_sendmsg_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.sendMsg_req)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::im::protocol::SendMsg_req* temp = _impl_.sendmsg_req_;
  _impl_.sendmsg_req_ = nullptr;
  return temp;
}
inline ::im::protocol::SendMsg_req* Packet::_internal_mutable_sendmsg_req() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sendmsg_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::SendMsg_req>(GetArenaForAllocation());
    _impl_.sendmsg_req_ = p;
  }
  return _impl_.sendmsg_req_;
}
inline ::im::protocol::SendMsg_req* Packet::mutable_sendmsg_req() {
  ::im::protocol::SendMsg_req* _msg = _internal_mutable_sendmsg_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.sendMsg_req)
  return _msg;
}
inline void Packet::set_allocated_sendmsg_req(::im::protocol::SendMsg_req* sendmsg_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sendmsg_req_;
  }
  if (sendmsg_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sendmsg_req);
    if (message_arena != submessage_arena) {
      sendmsg_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendmsg_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sendmsg_req_ = sendmsg_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.sendMsg_req)
}

// optional .im.protocol.SendMsg_rsp sendMsg_rsp = 5;
inline bool Packet::_internal_has_sendmsg_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sendmsg_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_sendmsg_rsp() const {
  return _internal_has_sendmsg_rsp();
}
inline void Packet::clear_sendmsg_rsp() {
  if (_impl_.sendmsg_rsp_ != nullptr) _impl_.sendmsg_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::im::protocol::SendMsg_rsp& Packet::_internal_sendmsg_rsp() const {
  const ::im::protocol::SendMsg_rsp* p = _impl_.sendmsg_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::SendMsg_rsp&>(
      ::im::protocol::_SendMsg_rsp_default_instance_);
}
inline const ::im::protocol::SendMsg_rsp& Packet::sendmsg_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.sendMsg_rsp)
  return _internal_sendmsg_rsp();
}
inline void Packet::unsafe_arena_set_allocated_sendmsg_rsp(
    ::im::protocol::SendMsg_rsp* sendmsg_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendmsg_rsp_);
  }
  _impl_.sendmsg_rsp_ = sendmsg_rsp;
  if (sendmsg_rsp) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.sendMsg_rsp)
}
inline ::im::protocol::SendMsg_rsp* Packet::release_sendmsg_rsp() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::im::protocol::SendMsg_rsp* temp = _impl_.sendmsg_rsp_;
  _impl_.sendmsg_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::SendMsg_rsp* Packet::unsafe_arena_release_sendmsg_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.sendMsg_rsp)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::im::protocol::SendMsg_rsp* temp = _impl_.sendmsg_rsp_;
  _impl_.sendmsg_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::SendMsg_rsp* Packet::_internal_mutable_sendmsg_rsp() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sendmsg_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::SendMsg_rsp>(GetArenaForAllocation());
    _impl_.sendmsg_rsp_ = p;
  }
  return _impl_.sendmsg_rsp_;
}
inline ::im::protocol::SendMsg_rsp* Packet::mutable_sendmsg_rsp() {
  ::im::protocol::SendMsg_rsp* _msg = _internal_mutable_sendmsg_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.sendMsg_rsp)
  return _msg;
}
inline void Packet::set_allocated_sendmsg_rsp(::im::protocol::SendMsg_rsp* sendmsg_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sendmsg_rsp_;
  }
  if (sendmsg_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sendmsg_rsp);
    if (message_arena != submessage_arena) {
      sendmsg_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendmsg_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sendmsg_rsp_ = sendmsg_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.sendMsg_rsp)
}

// optional .im.protocol.Login_req login_req = 6;
inline bool Packet::_internal_has_login_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_req_ != nullptr);
  return value;
}
inline bool Packet::has_login_req() const {
  return _internal_has_login_req();
}
inline void Packet::clear_login_req() {
  if (_impl_.login_req_ != nullptr) _impl_.login_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::im::protocol::Login_req& Packet::_internal_login_req() const {
  const ::im::protocol::Login_req* p = _impl_.login_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Login_req&>(
      ::im::protocol::_Login_req_default_instance_);
}
inline const ::im::protocol::Login_req& Packet::login_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.login_req)
  return _internal_login_req();
}
inline void Packet::unsafe_arena_set_allocated_login_req(
    ::im::protocol::Login_req* login_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_req_);
  }
  _impl_.login_req_ = login_req;
  if (login_req) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.login_req)
}
inline ::im::protocol::Login_req* Packet::release_login_req() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::im::protocol::Login_req* temp = _impl_.login_req_;
  _impl_.login_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Login_req* Packet::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.login_req)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::im::protocol::Login_req* temp = _impl_.login_req_;
  _impl_.login_req_ = nullptr;
  return temp;
}
inline ::im::protocol::Login_req* Packet::_internal_mutable_login_req() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.login_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Login_req>(GetArenaForAllocation());
    _impl_.login_req_ = p;
  }
  return _impl_.login_req_;
}
inline ::im::protocol::Login_req* Packet::mutable_login_req() {
  ::im::protocol::Login_req* _msg = _internal_mutable_login_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.login_req)
  return _msg;
}
inline void Packet::set_allocated_login_req(::im::protocol::Login_req* login_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_req_;
  }
  if (login_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_req);
    if (message_arena != submessage_arena) {
      login_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.login_req_ = login_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.login_req)
}

// optional .im.protocol.Login_rsp login_rsp = 7;
inline bool Packet::_internal_has_login_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void Packet::clear_login_rsp() {
  if (_impl_.login_rsp_ != nullptr) _impl_.login_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::im::protocol::Login_rsp& Packet::_internal_login_rsp() const {
  const ::im::protocol::Login_rsp* p = _impl_.login_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::Login_rsp&>(
      ::im::protocol::_Login_rsp_default_instance_);
}
inline const ::im::protocol::Login_rsp& Packet::login_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.login_rsp)
  return _internal_login_rsp();
}
inline void Packet::unsafe_arena_set_allocated_login_rsp(
    ::im::protocol::Login_rsp* login_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_rsp_);
  }
  _impl_.login_rsp_ = login_rsp;
  if (login_rsp) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.login_rsp)
}
inline ::im::protocol::Login_rsp* Packet::release_login_rsp() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::im::protocol::Login_rsp* temp = _impl_.login_rsp_;
  _impl_.login_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::Login_rsp* Packet::unsafe_arena_release_login_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.login_rsp)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::im::protocol::Login_rsp* temp = _impl_.login_rsp_;
  _impl_.login_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::Login_rsp* Packet::_internal_mutable_login_rsp() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.login_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::Login_rsp>(GetArenaForAllocation());
    _impl_.login_rsp_ = p;
  }
  return _impl_.login_rsp_;
}
inline ::im::protocol::Login_rsp* Packet::mutable_login_rsp() {
  ::im::protocol::Login_rsp* _msg = _internal_mutable_login_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.login_rsp)
  return _msg;
}
inline void Packet::set_allocated_login_rsp(::im::protocol::Login_rsp* login_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.login_rsp_;
  }
  if (login_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(login_rsp);
    if (message_arena != submessage_arena) {
      login_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.login_rsp_ = login_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.login_rsp)
}

// optional .im.protocol.GetFriends_req getFriends_req = 8;
inline bool Packet::_internal_has_getfriends_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.getfriends_req_ != nullptr);
  return value;
}
inline bool Packet::has_getfriends_req() const {
  return _internal_has_getfriends_req();
}
inline void Packet::clear_getfriends_req() {
  if (_impl_.getfriends_req_ != nullptr) _impl_.getfriends_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::im::protocol::GetFriends_req& Packet::_internal_getfriends_req() const {
  const ::im::protocol::GetFriends_req* p = _impl_.getfriends_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::GetFriends_req&>(
      ::im::protocol::_GetFriends_req_default_instance_);
}
inline const ::im::protocol::GetFriends_req& Packet::getfriends_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.getFriends_req)
  return _internal_getfriends_req();
}
inline void Packet::unsafe_arena_set_allocated_getfriends_req(
    ::im::protocol::GetFriends_req* getfriends_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfriends_req_);
  }
  _impl_.getfriends_req_ = getfriends_req;
  if (getfriends_req) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.getFriends_req)
}
inline ::im::protocol::GetFriends_req* Packet::release_getfriends_req() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::im::protocol::GetFriends_req* temp = _impl_.getfriends_req_;
  _impl_.getfriends_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::GetFriends_req* Packet::unsafe_arena_release_getfriends_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.getFriends_req)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::im::protocol::GetFriends_req* temp = _impl_.getfriends_req_;
  _impl_.getfriends_req_ = nullptr;
  return temp;
}
inline ::im::protocol::GetFriends_req* Packet::_internal_mutable_getfriends_req() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.getfriends_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::GetFriends_req>(GetArenaForAllocation());
    _impl_.getfriends_req_ = p;
  }
  return _impl_.getfriends_req_;
}
inline ::im::protocol::GetFriends_req* Packet::mutable_getfriends_req() {
  ::im::protocol::GetFriends_req* _msg = _internal_mutable_getfriends_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.getFriends_req)
  return _msg;
}
inline void Packet::set_allocated_getfriends_req(::im::protocol::GetFriends_req* getfriends_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.getfriends_req_;
  }
  if (getfriends_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getfriends_req);
    if (message_arena != submessage_arena) {
      getfriends_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfriends_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.getfriends_req_ = getfriends_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.getFriends_req)
}

// optional .im.protocol.GetFriends_rsp getFriends_rsp = 9;
inline bool Packet::_internal_has_getfriends_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.getfriends_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_getfriends_rsp() const {
  return _internal_has_getfriends_rsp();
}
inline void Packet::clear_getfriends_rsp() {
  if (_impl_.getfriends_rsp_ != nullptr) _impl_.getfriends_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::im::protocol::GetFriends_rsp& Packet::_internal_getfriends_rsp() const {
  const ::im::protocol::GetFriends_rsp* p = _impl_.getfriends_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::GetFriends_rsp&>(
      ::im::protocol::_GetFriends_rsp_default_instance_);
}
inline const ::im::protocol::GetFriends_rsp& Packet::getfriends_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.getFriends_rsp)
  return _internal_getfriends_rsp();
}
inline void Packet::unsafe_arena_set_allocated_getfriends_rsp(
    ::im::protocol::GetFriends_rsp* getfriends_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfriends_rsp_);
  }
  _impl_.getfriends_rsp_ = getfriends_rsp;
  if (getfriends_rsp) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.getFriends_rsp)
}
inline ::im::protocol::GetFriends_rsp* Packet::release_getfriends_rsp() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::im::protocol::GetFriends_rsp* temp = _impl_.getfriends_rsp_;
  _impl_.getfriends_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::GetFriends_rsp* Packet::unsafe_arena_release_getfriends_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.getFriends_rsp)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::im::protocol::GetFriends_rsp* temp = _impl_.getfriends_rsp_;
  _impl_.getfriends_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::GetFriends_rsp* Packet::_internal_mutable_getfriends_rsp() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.getfriends_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::GetFriends_rsp>(GetArenaForAllocation());
    _impl_.getfriends_rsp_ = p;
  }
  return _impl_.getfriends_rsp_;
}
inline ::im::protocol::GetFriends_rsp* Packet::mutable_getfriends_rsp() {
  ::im::protocol::GetFriends_rsp* _msg = _internal_mutable_getfriends_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.getFriends_rsp)
  return _msg;
}
inline void Packet::set_allocated_getfriends_rsp(::im::protocol::GetFriends_rsp* getfriends_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.getfriends_rsp_;
  }
  if (getfriends_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getfriends_rsp);
    if (message_arena != submessage_arena) {
      getfriends_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfriends_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.getfriends_rsp_ = getfriends_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.getFriends_rsp)
}

// optional .im.protocol.GetProfile_req getProfile_req = 10;
inline bool Packet::_internal_has_getprofile_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.getprofile_req_ != nullptr);
  return value;
}
inline bool Packet::has_getprofile_req() const {
  return _internal_has_getprofile_req();
}
inline void Packet::clear_getprofile_req() {
  if (_impl_.getprofile_req_ != nullptr) _impl_.getprofile_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::im::protocol::GetProfile_req& Packet::_internal_getprofile_req() const {
  const ::im::protocol::GetProfile_req* p = _impl_.getprofile_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::GetProfile_req&>(
      ::im::protocol::_GetProfile_req_default_instance_);
}
inline const ::im::protocol::GetProfile_req& Packet::getprofile_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.getProfile_req)
  return _internal_getprofile_req();
}
inline void Packet::unsafe_arena_set_allocated_getprofile_req(
    ::im::protocol::GetProfile_req* getprofile_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getprofile_req_);
  }
  _impl_.getprofile_req_ = getprofile_req;
  if (getprofile_req) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.getProfile_req)
}
inline ::im::protocol::GetProfile_req* Packet::release_getprofile_req() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::im::protocol::GetProfile_req* temp = _impl_.getprofile_req_;
  _impl_.getprofile_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::GetProfile_req* Packet::unsafe_arena_release_getprofile_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.getProfile_req)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::im::protocol::GetProfile_req* temp = _impl_.getprofile_req_;
  _impl_.getprofile_req_ = nullptr;
  return temp;
}
inline ::im::protocol::GetProfile_req* Packet::_internal_mutable_getprofile_req() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.getprofile_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::GetProfile_req>(GetArenaForAllocation());
    _impl_.getprofile_req_ = p;
  }
  return _impl_.getprofile_req_;
}
inline ::im::protocol::GetProfile_req* Packet::mutable_getprofile_req() {
  ::im::protocol::GetProfile_req* _msg = _internal_mutable_getprofile_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.getProfile_req)
  return _msg;
}
inline void Packet::set_allocated_getprofile_req(::im::protocol::GetProfile_req* getprofile_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.getprofile_req_;
  }
  if (getprofile_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getprofile_req);
    if (message_arena != submessage_arena) {
      getprofile_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getprofile_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.getprofile_req_ = getprofile_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.getProfile_req)
}

// optional .im.protocol.GetProfile_rsp getProfile_rsp = 11;
inline bool Packet::_internal_has_getprofile_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.getprofile_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_getprofile_rsp() const {
  return _internal_has_getprofile_rsp();
}
inline void Packet::clear_getprofile_rsp() {
  if (_impl_.getprofile_rsp_ != nullptr) _impl_.getprofile_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::im::protocol::GetProfile_rsp& Packet::_internal_getprofile_rsp() const {
  const ::im::protocol::GetProfile_rsp* p = _impl_.getprofile_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::GetProfile_rsp&>(
      ::im::protocol::_GetProfile_rsp_default_instance_);
}
inline const ::im::protocol::GetProfile_rsp& Packet::getprofile_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.getProfile_rsp)
  return _internal_getprofile_rsp();
}
inline void Packet::unsafe_arena_set_allocated_getprofile_rsp(
    ::im::protocol::GetProfile_rsp* getprofile_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getprofile_rsp_);
  }
  _impl_.getprofile_rsp_ = getprofile_rsp;
  if (getprofile_rsp) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.getProfile_rsp)
}
inline ::im::protocol::GetProfile_rsp* Packet::release_getprofile_rsp() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::im::protocol::GetProfile_rsp* temp = _impl_.getprofile_rsp_;
  _impl_.getprofile_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::GetProfile_rsp* Packet::unsafe_arena_release_getprofile_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.getProfile_rsp)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::im::protocol::GetProfile_rsp* temp = _impl_.getprofile_rsp_;
  _impl_.getprofile_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::GetProfile_rsp* Packet::_internal_mutable_getprofile_rsp() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.getprofile_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::GetProfile_rsp>(GetArenaForAllocation());
    _impl_.getprofile_rsp_ = p;
  }
  return _impl_.getprofile_rsp_;
}
inline ::im::protocol::GetProfile_rsp* Packet::mutable_getprofile_rsp() {
  ::im::protocol::GetProfile_rsp* _msg = _internal_mutable_getprofile_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.getProfile_rsp)
  return _msg;
}
inline void Packet::set_allocated_getprofile_rsp(::im::protocol::GetProfile_rsp* getprofile_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.getprofile_rsp_;
  }
  if (getprofile_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getprofile_rsp);
    if (message_arena != submessage_arena) {
      getprofile_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getprofile_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.getprofile_rsp_ = getprofile_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.getProfile_rsp)
}

// optional .im.protocol.SyncMsg_req syncMsg_req = 12;
inline bool Packet::_internal_has_syncmsg_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.syncmsg_req_ != nullptr);
  return value;
}
inline bool Packet::has_syncmsg_req() const {
  return _internal_has_syncmsg_req();
}
inline void Packet::clear_syncmsg_req() {
  if (_impl_.syncmsg_req_ != nullptr) _impl_.syncmsg_req_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::im::protocol::SyncMsg_req& Packet::_internal_syncmsg_req() const {
  const ::im::protocol::SyncMsg_req* p = _impl_.syncmsg_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::SyncMsg_req&>(
      ::im::protocol::_SyncMsg_req_default_instance_);
}
inline const ::im::protocol::SyncMsg_req& Packet::syncmsg_req() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.syncMsg_req)
  return _internal_syncmsg_req();
}
inline void Packet::unsafe_arena_set_allocated_syncmsg_req(
    ::im::protocol::SyncMsg_req* syncmsg_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.syncmsg_req_);
  }
  _impl_.syncmsg_req_ = syncmsg_req;
  if (syncmsg_req) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.syncMsg_req)
}
inline ::im::protocol::SyncMsg_req* Packet::release_syncmsg_req() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::im::protocol::SyncMsg_req* temp = _impl_.syncmsg_req_;
  _impl_.syncmsg_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::SyncMsg_req* Packet::unsafe_arena_release_syncmsg_req() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.syncMsg_req)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::im::protocol::SyncMsg_req* temp = _impl_.syncmsg_req_;
  _impl_.syncmsg_req_ = nullptr;
  return temp;
}
inline ::im::protocol::SyncMsg_req* Packet::_internal_mutable_syncmsg_req() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.syncmsg_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::SyncMsg_req>(GetArenaForAllocation());
    _impl_.syncmsg_req_ = p;
  }
  return _impl_.syncmsg_req_;
}
inline ::im::protocol::SyncMsg_req* Packet::mutable_syncmsg_req() {
  ::im::protocol::SyncMsg_req* _msg = _internal_mutable_syncmsg_req();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.syncMsg_req)
  return _msg;
}
inline void Packet::set_allocated_syncmsg_req(::im::protocol::SyncMsg_req* syncmsg_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.syncmsg_req_;
  }
  if (syncmsg_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(syncmsg_req);
    if (message_arena != submessage_arena) {
      syncmsg_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncmsg_req, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.syncmsg_req_ = syncmsg_req;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.syncMsg_req)
}

// optional .im.protocol.SyncMsg_rsp syncMsg_rsp = 13;
inline bool Packet::_internal_has_syncmsg_rsp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.syncmsg_rsp_ != nullptr);
  return value;
}
inline bool Packet::has_syncmsg_rsp() const {
  return _internal_has_syncmsg_rsp();
}
inline void Packet::clear_syncmsg_rsp() {
  if (_impl_.syncmsg_rsp_ != nullptr) _impl_.syncmsg_rsp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::im::protocol::SyncMsg_rsp& Packet::_internal_syncmsg_rsp() const {
  const ::im::protocol::SyncMsg_rsp* p = _impl_.syncmsg_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::im::protocol::SyncMsg_rsp&>(
      ::im::protocol::_SyncMsg_rsp_default_instance_);
}
inline const ::im::protocol::SyncMsg_rsp& Packet::syncmsg_rsp() const {
  // @@protoc_insertion_point(field_get:im.protocol.Packet.syncMsg_rsp)
  return _internal_syncmsg_rsp();
}
inline void Packet::unsafe_arena_set_allocated_syncmsg_rsp(
    ::im::protocol::SyncMsg_rsp* syncmsg_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.syncmsg_rsp_);
  }
  _impl_.syncmsg_rsp_ = syncmsg_rsp;
  if (syncmsg_rsp) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.protocol.Packet.syncMsg_rsp)
}
inline ::im::protocol::SyncMsg_rsp* Packet::release_syncmsg_rsp() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::im::protocol::SyncMsg_rsp* temp = _impl_.syncmsg_rsp_;
  _impl_.syncmsg_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::im::protocol::SyncMsg_rsp* Packet::unsafe_arena_release_syncmsg_rsp() {
  // @@protoc_insertion_point(field_release:im.protocol.Packet.syncMsg_rsp)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::im::protocol::SyncMsg_rsp* temp = _impl_.syncmsg_rsp_;
  _impl_.syncmsg_rsp_ = nullptr;
  return temp;
}
inline ::im::protocol::SyncMsg_rsp* Packet::_internal_mutable_syncmsg_rsp() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.syncmsg_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::im::protocol::SyncMsg_rsp>(GetArenaForAllocation());
    _impl_.syncmsg_rsp_ = p;
  }
  return _impl_.syncmsg_rsp_;
}
inline ::im::protocol::SyncMsg_rsp* Packet::mutable_syncmsg_rsp() {
  ::im::protocol::SyncMsg_rsp* _msg = _internal_mutable_syncmsg_rsp();
  // @@protoc_insertion_point(field_mutable:im.protocol.Packet.syncMsg_rsp)
  return _msg;
}
inline void Packet::set_allocated_syncmsg_rsp(::im::protocol::SyncMsg_rsp* syncmsg_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.syncmsg_rsp_;
  }
  if (syncmsg_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(syncmsg_rsp);
    if (message_arena != submessage_arena) {
      syncmsg_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncmsg_rsp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.syncmsg_rsp_ = syncmsg_rsp;
  // @@protoc_insertion_point(field_set_allocated:im.protocol.Packet.syncMsg_rsp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::protocol::CMD_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::protocol::CMD_TYPE>() {
  return ::im::protocol::CMD_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_im_2eproto
