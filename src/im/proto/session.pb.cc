// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#include "session.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace im {
namespace proto {
PROTOBUF_CONSTEXPR Session::Session(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.scene_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.lastmsgid_)*/uint64_t{0u}
  , /*decltype(_impl_.updatetime_)*/uint64_t{0u}
  , /*decltype(_impl_.unread_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDefaultTypeInternal _Session_default_instance_;
}  // namespace proto
}  // namespace im
static ::_pb::Metadata file_level_metadata_session_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_session_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_session_2eproto = nullptr;

const uint32_t TableStruct_session_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.lastmsgid_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.ext_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::im::proto::Session, _impl_.unread_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::im::proto::Session)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::im::proto::_Session_default_instance_._instance,
};

const char descriptor_table_protodef_session_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsession.proto\022\010im.proto\"\202\001\n\007Session\022\n\n"
  "\002id\030\001 \001(\004\022\r\n\005scene\030\002 \001(\r\022\n\n\002to\030\003 \001(\t\022\014\n\004"
  "type\030\004 \001(\r\022\021\n\tlastMsgId\030\005 \001(\004\022\013\n\003ext\030\006 \001"
  "(\t\022\022\n\nupdateTime\030\007 \001(\004\022\016\n\006unread\030\010 \001(\rB%"
  "\n\025com.zhuzichu.protocolB\014SessionProtob\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_session_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_session_2eproto = {
    false, false, 205, descriptor_table_protodef_session_2eproto,
    "session.proto",
    &descriptor_table_session_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_session_2eproto::offsets,
    file_level_metadata_session_2eproto, file_level_enum_descriptors_session_2eproto,
    file_level_service_descriptors_session_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_session_2eproto_getter() {
  return &descriptor_table_session_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_session_2eproto(&descriptor_table_session_2eproto);
namespace im {
namespace proto {

// ===================================================================

class Session::_Internal {
 public:
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:im.proto.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Session* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.ext_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.scene_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.lastmsgid_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.unread_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ext().empty()) {
    _this->_impl_.ext_.Set(from._internal_ext(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unread_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unread_));
  // @@protoc_insertion_point(copy_constructor:im.proto.Session)
}

inline void Session::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.ext_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.scene_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.lastmsgid_){uint64_t{0u}}
    , decltype(_impl_.updatetime_){uint64_t{0u}}
    , decltype(_impl_.unread_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:im.proto.Session)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_.Destroy();
  _impl_.ext_.Destroy();
}

void Session::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:im.proto.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_.ClearToEmpty();
  _impl_.ext_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unread_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unread_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.proto.Session.to"));
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lastMsgId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lastmsgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ext = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "im.proto.Session.ext"));
        } else
          goto handle_unusual;
        continue;
      // uint64 updateTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unread = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:im.proto.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 scene = 2;
  if (this->_internal_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scene(), target);
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.proto.Session.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint64 lastMsgId = 5;
  if (this->_internal_lastmsgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lastmsgid(), target);
  }

  // string ext = 6;
  if (!this->_internal_ext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ext().data(), static_cast<int>(this->_internal_ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "im.proto.Session.ext");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ext(), target);
  }

  // uint64 updateTime = 7;
  if (this->_internal_updatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_updatetime(), target);
  }

  // uint32 unread = 8;
  if (this->_internal_unread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:im.proto.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.proto.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 3;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string ext = 6;
  if (!this->_internal_ext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ext());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 scene = 2;
  if (this->_internal_scene() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scene());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint64 lastMsgId = 5;
  if (this->_internal_lastmsgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lastmsgid());
  }

  // uint64 updateTime = 7;
  if (this->_internal_updatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_updatetime());
  }

  // uint32 unread = 8;
  if (this->_internal_unread() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unread());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }


void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Session*>(&to_msg);
  auto& from = static_cast<const Session&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:im.proto.Session)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_ext().empty()) {
    _this->_internal_set_ext(from._internal_ext());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_scene() != 0) {
    _this->_internal_set_scene(from._internal_scene());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_lastmsgid() != 0) {
    _this->_internal_set_lastmsgid(from._internal_lastmsgid());
  }
  if (from._internal_updatetime() != 0) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_unread() != 0) {
    _this->_internal_set_unread(from._internal_unread());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ext_, lhs_arena,
      &other->_impl_.ext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, _impl_.unread_)
      + sizeof(Session::_impl_.unread_)
      - PROTOBUF_FIELD_OFFSET(Session, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_session_2eproto_getter, &descriptor_table_session_2eproto_once,
      file_level_metadata_session_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::im::proto::Session*
Arena::CreateMaybeMessage< ::im::proto::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::im::proto::Session >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
