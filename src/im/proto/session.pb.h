// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_session_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_session_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_session_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_session_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_session_2eproto;
namespace im {
namespace proto {
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
}  // namespace proto
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::proto::Session* Arena::CreateMaybeMessage<::im::proto::Session>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace proto {

// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.proto.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit PROTOBUF_CONSTEXPR Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Session& from) {
    Session::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.proto.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 3,
    kExtFieldNumber = 6,
    kIdFieldNumber = 1,
    kSceneFieldNumber = 2,
    kTypeFieldNumber = 4,
    kLastMsgIdFieldNumber = 5,
    kUpdateTimeFieldNumber = 7,
    kUnreadFieldNumber = 8,
  };
  // string to = 3;
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string ext = 6;
  void clear_ext();
  const std::string& ext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ext();
  PROTOBUF_NODISCARD std::string* release_ext();
  void set_allocated_ext(std::string* ext);
  private:
  const std::string& _internal_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext(const std::string& value);
  std::string* _internal_mutable_ext();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 scene = 2;
  void clear_scene();
  uint32_t scene() const;
  void set_scene(uint32_t value);
  private:
  uint32_t _internal_scene() const;
  void _internal_set_scene(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint64 lastMsgId = 5;
  void clear_lastmsgid();
  uint64_t lastmsgid() const;
  void set_lastmsgid(uint64_t value);
  private:
  uint64_t _internal_lastmsgid() const;
  void _internal_set_lastmsgid(uint64_t value);
  public:

  // uint64 updateTime = 7;
  void clear_updatetime();
  uint64_t updatetime() const;
  void set_updatetime(uint64_t value);
  private:
  uint64_t _internal_updatetime() const;
  void _internal_set_updatetime(uint64_t value);
  public:

  // uint32 unread = 8;
  void clear_unread();
  uint32_t unread() const;
  void set_unread(uint32_t value);
  private:
  uint32_t _internal_unread() const;
  void _internal_set_unread(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.proto.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_;
    uint64_t id_;
    uint32_t scene_;
    uint32_t type_;
    uint64_t lastmsgid_;
    uint64_t updatetime_;
    uint32_t unread_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_session_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// uint64 id = 1;
inline void Session::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Session::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Session::id() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.id)
  return _internal_id();
}
inline void Session::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Session::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.id)
}

// uint32 scene = 2;
inline void Session::clear_scene() {
  _impl_.scene_ = 0u;
}
inline uint32_t Session::_internal_scene() const {
  return _impl_.scene_;
}
inline uint32_t Session::scene() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.scene)
  return _internal_scene();
}
inline void Session::_internal_set_scene(uint32_t value) {
  
  _impl_.scene_ = value;
}
inline void Session::set_scene(uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.scene)
}

// string to = 3;
inline void Session::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& Session::to() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Session.to)
}
inline std::string* Session::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:im.proto.Session.to)
  return _s;
}
inline const std::string& Session::_internal_to() const {
  return _impl_.to_.Get();
}
inline void Session::_internal_set_to(const std::string& value) {
  
  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_to() {
  
  return _impl_.to_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_to() {
  // @@protoc_insertion_point(field_release:im.proto.Session.to)
  return _impl_.to_.Release();
}
inline void Session::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  _impl_.to_.SetAllocated(to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_.IsDefault()) {
    _impl_.to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Session.to)
}

// uint32 type = 4;
inline void Session::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Session::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Session::type() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.type)
  return _internal_type();
}
inline void Session::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Session::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.type)
}

// uint64 lastMsgId = 5;
inline void Session::clear_lastmsgid() {
  _impl_.lastmsgid_ = uint64_t{0u};
}
inline uint64_t Session::_internal_lastmsgid() const {
  return _impl_.lastmsgid_;
}
inline uint64_t Session::lastmsgid() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.lastMsgId)
  return _internal_lastmsgid();
}
inline void Session::_internal_set_lastmsgid(uint64_t value) {
  
  _impl_.lastmsgid_ = value;
}
inline void Session::set_lastmsgid(uint64_t value) {
  _internal_set_lastmsgid(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.lastMsgId)
}

// string ext = 6;
inline void Session::clear_ext() {
  _impl_.ext_.ClearToEmpty();
}
inline const std::string& Session::ext() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.ext)
  return _internal_ext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_ext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Session.ext)
}
inline std::string* Session::mutable_ext() {
  std::string* _s = _internal_mutable_ext();
  // @@protoc_insertion_point(field_mutable:im.proto.Session.ext)
  return _s;
}
inline const std::string& Session::_internal_ext() const {
  return _impl_.ext_.Get();
}
inline void Session::_internal_set_ext(const std::string& value) {
  
  _impl_.ext_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_ext() {
  
  return _impl_.ext_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_ext() {
  // @@protoc_insertion_point(field_release:im.proto.Session.ext)
  return _impl_.ext_.Release();
}
inline void Session::set_allocated_ext(std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  _impl_.ext_.SetAllocated(ext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ext_.IsDefault()) {
    _impl_.ext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Session.ext)
}

// uint64 updateTime = 7;
inline void Session::clear_updatetime() {
  _impl_.updatetime_ = uint64_t{0u};
}
inline uint64_t Session::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline uint64_t Session::updatetime() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.updateTime)
  return _internal_updatetime();
}
inline void Session::_internal_set_updatetime(uint64_t value) {
  
  _impl_.updatetime_ = value;
}
inline void Session::set_updatetime(uint64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.updateTime)
}

// uint32 unread = 8;
inline void Session::clear_unread() {
  _impl_.unread_ = 0u;
}
inline uint32_t Session::_internal_unread() const {
  return _impl_.unread_;
}
inline uint32_t Session::unread() const {
  // @@protoc_insertion_point(field_get:im.proto.Session.unread)
  return _internal_unread();
}
inline void Session::_internal_set_unread(uint32_t value) {
  
  _impl_.unread_ = value;
}
inline void Session::set_unread(uint32_t value) {
  _internal_set_unread(value);
  // @@protoc_insertion_point(field_set:im.proto.Session.unread)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace im

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_session_2eproto
