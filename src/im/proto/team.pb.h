// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_team_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_team_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_team_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_team_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_team_2eproto;
namespace im {
namespace proto {
class Team;
struct TeamDefaultTypeInternal;
extern TeamDefaultTypeInternal _Team_default_instance_;
}  // namespace proto
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::proto::Team* Arena::CreateMaybeMessage<::im::proto::Team>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {
namespace proto {

// ===================================================================

class Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.proto.Team) */ {
 public:
  inline Team() : Team(nullptr) {}
  ~Team() override;
  explicit PROTOBUF_CONSTEXPR Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Team(const Team& from);
  Team(Team&& from) noexcept
    : Team() {
    *this = ::std::move(from);
  }

  inline Team& operator=(const Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline Team& operator=(Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const Team* internal_default_instance() {
    return reinterpret_cast<const Team*>(
               &_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Team& a, Team& b) {
    a.Swap(&b);
  }
  inline void Swap(Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Team& from) {
    Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.proto.Team";
  }
  protected:
  explicit Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kIntroFieldNumber = 4,
    kAnnouncementFieldNumber = 5,
    kOwnerFieldNumber = 6,
    kIdFieldNumber = 1,
    kExtFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kCreateTimeFieldNumber = 10,
    kLevelFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string intro = 4;
  void clear_intro();
  const std::string& intro() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intro(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* intro);
  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(const std::string& value);
  std::string* _internal_mutable_intro();
  public:

  // string announcement = 5;
  void clear_announcement();
  const std::string& announcement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement();
  PROTOBUF_NODISCARD std::string* release_announcement();
  void set_allocated_announcement(std::string* announcement);
  private:
  const std::string& _internal_announcement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement(const std::string& value);
  std::string* _internal_mutable_announcement();
  public:

  // string owner = 6;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 ext = 8;
  void clear_ext();
  uint64_t ext() const;
  void set_ext(uint64_t value);
  private:
  uint64_t _internal_ext() const;
  void _internal_set_ext(uint64_t value);
  public:

  // uint64 update_time = 9;
  void clear_update_time();
  uint64_t update_time() const;
  void set_update_time(uint64_t value);
  private:
  uint64_t _internal_update_time() const;
  void _internal_set_update_time(uint64_t value);
  public:

  // uint64 create_time = 10;
  void clear_create_time();
  uint64_t create_time() const;
  void set_create_time(uint64_t value);
  private:
  uint64_t _internal_create_time() const;
  void _internal_set_create_time(uint64_t value);
  public:

  // uint32 level = 7;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:im.proto.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intro_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    uint64_t id_;
    uint64_t ext_;
    uint64_t update_time_;
    uint64_t create_time_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_team_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Team

// uint64 id = 1;
inline void Team::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Team::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Team::id() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.id)
  return _internal_id();
}
inline void Team::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Team::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:im.proto.Team.id)
}

// string name = 2;
inline void Team::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Team::name() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Team.name)
}
inline std::string* Team::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:im.proto.Team.name)
  return _s;
}
inline const std::string& Team::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Team::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_name() {
  // @@protoc_insertion_point(field_release:im.proto.Team.name)
  return _impl_.name_.Release();
}
inline void Team::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Team.name)
}

// string avatar = 3;
inline void Team::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& Team::avatar() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Team.avatar)
}
inline std::string* Team::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:im.proto.Team.avatar)
  return _s;
}
inline const std::string& Team::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void Team::_internal_set_avatar(const std::string& value) {
  
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_avatar() {
  
  return _impl_.avatar_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_avatar() {
  // @@protoc_insertion_point(field_release:im.proto.Team.avatar)
  return _impl_.avatar_.Release();
}
inline void Team::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_.SetAllocated(avatar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_.IsDefault()) {
    _impl_.avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Team.avatar)
}

// string intro = 4;
inline void Team::clear_intro() {
  _impl_.intro_.ClearToEmpty();
}
inline const std::string& Team::intro() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.intro)
  return _internal_intro();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_intro(ArgT0&& arg0, ArgT... args) {
 
 _impl_.intro_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Team.intro)
}
inline std::string* Team::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:im.proto.Team.intro)
  return _s;
}
inline const std::string& Team::_internal_intro() const {
  return _impl_.intro_.Get();
}
inline void Team::_internal_set_intro(const std::string& value) {
  
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_intro() {
  
  return _impl_.intro_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_intro() {
  // @@protoc_insertion_point(field_release:im.proto.Team.intro)
  return _impl_.intro_.Release();
}
inline void Team::set_allocated_intro(std::string* intro) {
  if (intro != nullptr) {
    
  } else {
    
  }
  _impl_.intro_.SetAllocated(intro, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.intro_.IsDefault()) {
    _impl_.intro_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Team.intro)
}

// string announcement = 5;
inline void Team::clear_announcement() {
  _impl_.announcement_.ClearToEmpty();
}
inline const std::string& Team::announcement() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.announcement)
  return _internal_announcement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_announcement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.announcement_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Team.announcement)
}
inline std::string* Team::mutable_announcement() {
  std::string* _s = _internal_mutable_announcement();
  // @@protoc_insertion_point(field_mutable:im.proto.Team.announcement)
  return _s;
}
inline const std::string& Team::_internal_announcement() const {
  return _impl_.announcement_.Get();
}
inline void Team::_internal_set_announcement(const std::string& value) {
  
  _impl_.announcement_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_announcement() {
  
  return _impl_.announcement_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_announcement() {
  // @@protoc_insertion_point(field_release:im.proto.Team.announcement)
  return _impl_.announcement_.Release();
}
inline void Team::set_allocated_announcement(std::string* announcement) {
  if (announcement != nullptr) {
    
  } else {
    
  }
  _impl_.announcement_.SetAllocated(announcement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.announcement_.IsDefault()) {
    _impl_.announcement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Team.announcement)
}

// string owner = 6;
inline void Team::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& Team::owner() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Team::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:im.proto.Team.owner)
}
inline std::string* Team::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:im.proto.Team.owner)
  return _s;
}
inline const std::string& Team::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void Team::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* Team::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* Team::release_owner() {
  // @@protoc_insertion_point(field_release:im.proto.Team.owner)
  return _impl_.owner_.Release();
}
inline void Team::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:im.proto.Team.owner)
}

// uint32 level = 7;
inline void Team::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Team::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Team::level() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.level)
  return _internal_level();
}
inline void Team::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Team::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:im.proto.Team.level)
}

// uint64 ext = 8;
inline void Team::clear_ext() {
  _impl_.ext_ = uint64_t{0u};
}
inline uint64_t Team::_internal_ext() const {
  return _impl_.ext_;
}
inline uint64_t Team::ext() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.ext)
  return _internal_ext();
}
inline void Team::_internal_set_ext(uint64_t value) {
  
  _impl_.ext_ = value;
}
inline void Team::set_ext(uint64_t value) {
  _internal_set_ext(value);
  // @@protoc_insertion_point(field_set:im.proto.Team.ext)
}

// uint64 update_time = 9;
inline void Team::clear_update_time() {
  _impl_.update_time_ = uint64_t{0u};
}
inline uint64_t Team::_internal_update_time() const {
  return _impl_.update_time_;
}
inline uint64_t Team::update_time() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.update_time)
  return _internal_update_time();
}
inline void Team::_internal_set_update_time(uint64_t value) {
  
  _impl_.update_time_ = value;
}
inline void Team::set_update_time(uint64_t value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:im.proto.Team.update_time)
}

// uint64 create_time = 10;
inline void Team::clear_create_time() {
  _impl_.create_time_ = uint64_t{0u};
}
inline uint64_t Team::_internal_create_time() const {
  return _impl_.create_time_;
}
inline uint64_t Team::create_time() const {
  // @@protoc_insertion_point(field_get:im.proto.Team.create_time)
  return _internal_create_time();
}
inline void Team::_internal_set_create_time(uint64_t value) {
  
  _impl_.create_time_ = value;
}
inline void Team::set_create_time(uint64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:im.proto.Team.create_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace im

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_team_2eproto
